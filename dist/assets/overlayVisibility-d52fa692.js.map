{"version":3,"file":"overlayVisibility-d52fa692.js","sources":["../../src/ui/state/world.ts","../../src/ui/state/overlayChat.ts","../../src/ui/state/overlayWorld.ts","../../src/engine/network/createMatrixNetworkInterface.ts","../../src/ui/hooks/useWorldLoader.ts","../../src/ui/state/overlayVisibility.ts"],"sourcesContent":["import { atom } from \"jotai\";\n\nimport { editorAtom } from \"./editor\";\n\ninterface WorldState {\n  worldId: string | undefined;\n  entered: boolean;\n  loading: boolean;\n}\n\ntype WorldAction =\n  | {\n      type: \"LOAD\";\n      roomId: string;\n    }\n  | {\n      type: \"ENTER\";\n    }\n  | {\n      type: \"CLOSE\";\n    };\n\nconst baseWorldAtom = atom<WorldState>({\n  worldId: undefined,\n  entered: false,\n  loading: false,\n});\n\nexport const worldAtom = atom<WorldState, [WorldAction], void>(\n  (get) => get(baseWorldAtom),\n  (get, set, action) => {\n    if (action.type === \"LOAD\") {\n      set(baseWorldAtom, {\n        worldId: action.roomId,\n        entered: false,\n        loading: true,\n      });\n      return;\n    }\n    if (action.type === \"ENTER\") {\n      set(baseWorldAtom, {\n        worldId: get(baseWorldAtom).worldId,\n        entered: true,\n        loading: false,\n      });\n      return;\n    }\n    if (action.type === \"CLOSE\") {\n      set(baseWorldAtom, {\n        worldId: undefined,\n        entered: false,\n        loading: false,\n      });\n      set(editorAtom, { type: \"RESET\" });\n    }\n  }\n);\n","import produce from \"immer\";\nimport { atom } from \"jotai\";\n\nconst baseOpenedChatAtom = atom<string | undefined>(undefined);\n\nexport const openedChatAtom = atom((get) => get(baseOpenedChatAtom));\n\ntype ActiveChatAction = {\n  type: \"OPEN\" | \"MINIMIZE\" | \"CLOSE\";\n  roomId: string;\n};\n\nconst baseActiveChats = atom(new Set<string>());\n\nexport const activeChatsAtom = atom<Set<string>, [ActiveChatAction], void>(\n  (get) => get(baseActiveChats),\n  (get, set, action) => {\n    if (action.type === \"OPEN\") {\n      set(\n        baseActiveChats,\n        produce(get(baseActiveChats), (draftChats) => {\n          draftChats.add(action.roomId);\n        })\n      );\n      set(baseOpenedChatAtom, action.roomId);\n      return;\n    }\n    if (action.type === \"MINIMIZE\" && get(baseOpenedChatAtom) === action.roomId) {\n      set(baseOpenedChatAtom, undefined);\n      return;\n    }\n    if (action.type === \"CLOSE\") {\n      set(\n        baseActiveChats,\n        produce(get(baseActiveChats), (draftChats) => {\n          draftChats.delete(action.roomId);\n        })\n      );\n      if (get(baseOpenedChatAtom) === action.roomId) set(baseOpenedChatAtom, undefined);\n      return;\n    }\n  }\n);\n","import { atom } from \"jotai\";\n\nimport { activeChatsAtom, openedChatAtom } from \"./overlayChat\";\n\nconst baseOverlayWorldAtom = atom<string | undefined>(undefined);\n\nexport const overlayWorldAtom = atom<string | undefined, [string | undefined], void>(\n  (get) => get(baseOverlayWorldAtom),\n  (get, set, value) => {\n    set(baseOverlayWorldAtom, value);\n\n    const openedChatId = get(openedChatAtom);\n    if (openedChatId) {\n      set(activeChatsAtom, {\n        type: \"MINIMIZE\",\n        roomId: openedChatId,\n      });\n    }\n  }\n);\n","import {\n  CallIntent,\n  Client,\n  GroupCall,\n  LocalMedia,\n  Member,\n  Platform,\n  Room,\n  Session,\n  SubscriptionHandle,\n} from \"@thirdroom/hydrogen-view-sdk\";\n\nimport { exitWorld } from \"../../plugins/thirdroom/thirdroom.main\";\nimport { setLocalMediaStream } from \"../audio/audio.main\";\nimport { MainContext } from \"../MainThread\";\nimport { addPeer, disconnect, hasPeer, removePeer, setHost } from \"./network.main\";\nimport { getRoomCall } from \"../../ui/utils/matrixUtils\";\n\nexport interface MatrixNetworkInterface {\n  dispose: () => void;\n}\n\nfunction memberComparator(a: Member, b: Member): number {\n  if (a.eventTimestamp === b.eventTimestamp) {\n    return a.deviceIndex - b.deviceIndex;\n  }\n\n  return a.eventTimestamp - b.eventTimestamp;\n}\n\nfunction isOlderThanLocalHost(groupCall: GroupCall, member: Member): boolean {\n  if (groupCall.eventTimestamp === member.eventTimestamp) {\n    return groupCall.deviceIndex! <= member.deviceIndex;\n  }\n\n  return groupCall.eventTimestamp! < member.eventTimestamp;\n}\n\nfunction getReliableHost(groupCall: GroupCall): Member | undefined {\n  const sortedMembers = Array.from(new Map(groupCall.members).values())\n    .sort(memberComparator)\n    .filter((member) => member.isConnected && member.dataChannel);\n\n  if (sortedMembers.length === 0) return undefined;\n  if (isOlderThanLocalHost(groupCall, sortedMembers[0])) return undefined;\n\n  return sortedMembers[0];\n}\n\nconst getWorldGroupCall = (session: Session, world: Room) => getRoomCall(session.callHandler.calls, world.id);\n\nexport async function createMatrixNetworkInterface(\n  ctx: MainContext,\n  client: Client,\n  platform: Platform,\n  world: Room\n): Promise<MatrixNetworkInterface> {\n  const session = client.session;\n\n  if (!session) {\n    throw new Error(\"You must initialize the client session before creating the network interface\");\n  }\n\n  let groupCall = getWorldGroupCall(session, world);\n\n  if (!groupCall) {\n    groupCall = await session.callHandler.createCall(world.id, \"m.voice\", \"World Call\", CallIntent.Room);\n  }\n\n  let stream;\n  try {\n    stream = await platform.mediaDevices.getMediaTracks(true, false);\n  } catch (err) {\n    console.error(err);\n  }\n  const localMedia = stream\n    ? new LocalMedia().withUserMedia(stream).withDataChannel({})\n    : new LocalMedia().withDataChannel({});\n\n  await groupCall.join(localMedia);\n\n  // Mute after connecting based on user preference\n  if (groupCall.muteSettings?.microphone === false && localStorage.getItem(\"microphone\") !== \"true\") {\n    groupCall.setMuted(groupCall.muteSettings.toggleMicrophone());\n  }\n\n  setLocalMediaStream(ctx, groupCall.localMedia?.userMedia);\n\n  // TODO: should peer ids be keyed like the call ids? (userId, deviceId, sessionId)?\n  // Or maybe just (userId, deviceId)?\n  // engine.setPeerId(client.session.userId);\n\n  let unsubscibeMembersObservable: SubscriptionHandle | undefined;\n\n  const userId = session.userId;\n\n  const initialHostId = await getInitialHost(groupCall, userId);\n  await joinWorld(groupCall, userId, initialHostId === userId);\n\n  function getInitialHost(groupCall: GroupCall, userId: string): Promise<string> {\n    // Of the all group call members find the one whose member event is oldest\n    // If the member has multiple devices get the device with the lowest device index\n    // Wait for that member to be connected and return their user id\n    // If the member hasn't connected in 10 seconds, return the longest connected user id\n\n    return new Promise((resolve) => {\n      let timeout: number | undefined = undefined;\n\n      const reliableHost = getReliableHost(groupCall);\n      if (reliableHost) {\n        resolve(reliableHost.userId);\n        return;\n      }\n      if (groupCall.members.size === 0) {\n        resolve(userId);\n        return;\n      }\n\n      const unsubscribe = groupCall.members.subscribe({\n        onAdd() {\n          const host = getReliableHost(groupCall);\n          if (host) {\n            clearTimeout(timeout);\n            unsubscribe();\n            resolve(host.userId);\n          }\n        },\n        onRemove() {\n          const host = getReliableHost(groupCall);\n          if (host) {\n            clearTimeout(timeout);\n            unsubscribe();\n            resolve(host.userId);\n          }\n        },\n        onReset() {\n          throw new Error(\"Unexpected reset of groupCall.members\");\n        },\n        onUpdate() {\n          const host = getReliableHost(groupCall);\n          if (host) {\n            clearTimeout(timeout);\n            unsubscribe();\n            resolve(host.userId);\n          }\n        },\n      });\n\n      // wait if any member to become reliable.\n      // resolve otherwise\n      timeout = window.setTimeout(() => {\n        unsubscribe();\n        const host = getReliableHost(groupCall);\n        resolve(host?.userId ?? userId);\n      }, 10000);\n    });\n  }\n\n  async function joinWorld(groupCall: GroupCall, userId: string, isHost: boolean) {\n    if (isHost) setHost(ctx, userId);\n\n    unsubscibeMembersObservable = groupCall.members.subscribe({\n      onAdd(_key, member) {\n        if (member.isConnected && member.dataChannel) {\n          updateHost(groupCall, userId);\n          addPeer(ctx, member.userId, member.dataChannel, member.remoteMedia?.userMedia);\n        }\n      },\n      onRemove(_key, member) {\n        updateHost(groupCall, userId);\n        removePeer(ctx, member.userId);\n      },\n      onReset() {\n        throw new Error(\"Unexpected reset of groupCall.members\");\n      },\n      onUpdate(_key, member) {\n        if (member.isConnected && member.dataChannel && !hasPeer(ctx, member.userId)) {\n          updateHost(groupCall, userId);\n          addPeer(ctx, member.userId, member.dataChannel, member.remoteMedia?.userMedia);\n        }\n      },\n    });\n\n    for (const [, member] of groupCall.members) {\n      if (member.isConnected && member.dataChannel) {\n        addPeer(ctx, member.userId, member.dataChannel, member.remoteMedia?.userMedia);\n      }\n    }\n  }\n\n  function updateHost(groupCall: GroupCall, userId: string) {\n    // Of the connected members find the one whose member event is oldest\n    // If the member has multiple devices get the device with the lowest device index\n\n    const reliableHost = getReliableHost(groupCall);\n\n    if (reliableHost) {\n      // TODO: use powerlevels to determine host\n      setHost(ctx, reliableHost.userId);\n    } else {\n      setHost(ctx, userId);\n    }\n  }\n\n  return {\n    dispose: () => {\n      disconnect(ctx);\n\n      exitWorld(ctx);\n\n      setLocalMediaStream(ctx, undefined);\n\n      if (unsubscibeMembersObservable) {\n        unsubscibeMembersObservable();\n      }\n\n      if (groupCall) {\n        groupCall.leave();\n      }\n    },\n  };\n}\n\nlet baseMxNetworkInterface: MatrixNetworkInterface | undefined;\nexport const registerMatrixNetworkInterface = (matrixNetworkInterface: MatrixNetworkInterface) => {\n  baseMxNetworkInterface = matrixNetworkInterface;\n};\nexport const provideMatrixNetworkInterface = (\n  update: (mxNetworkInterface: MatrixNetworkInterface | undefined) => void\n) => {\n  update(baseMxNetworkInterface);\n};\n","import { Room, Content } from \"@thirdroom/hydrogen-view-sdk\";\nimport { useSetAtom } from \"jotai\";\nimport { useCallback } from \"react\";\n\nimport { AudioModule } from \"../../engine/audio/audio.main\";\nimport { disposeActiveMatrixRoom, setActiveMatrixRoom } from \"../../engine/matrix/matrix.main\";\nimport { getModule } from \"../../engine/module/module.common\";\nimport {\n  createMatrixNetworkInterface,\n  registerMatrixNetworkInterface,\n  provideMatrixNetworkInterface,\n} from \"../../engine/network/createMatrixNetworkInterface\";\nimport { enterWorld, loadWorld, reloadWorld } from \"../../plugins/thirdroom/thirdroom.main\";\nimport { worldAtom } from \"../state/world\";\nimport { useHydrogen } from \"./useHydrogen\";\nimport { useMainThreadContext } from \"./useMainThread\";\n\nexport interface WorldLoader {\n  loadAndEnterWorld: (\n    world: Room,\n    content: Content,\n    options?: {\n      reload?: boolean;\n    }\n  ) => Promise<void>;\n  reloadWorld: (world: Room, content: Content) => Promise<void>;\n  exitWorld: () => void;\n}\n\nexport function useWorldLoader(): WorldLoader {\n  const { session, platform, client } = useHydrogen(true);\n  const mainThread = useMainThreadContext();\n  const setWorld = useSetAtom(worldAtom);\n\n  const exitWorldCallback = useCallback(async () => {\n    provideMatrixNetworkInterface((matrixNetworkInterface) => {\n      matrixNetworkInterface?.dispose();\n    });\n\n    disposeActiveMatrixRoom(mainThread);\n\n    setWorld({ type: \"CLOSE\" });\n  }, [setWorld, mainThread]);\n\n  const loadAndEnterWorldCallback = useCallback(\n    async (world: Room, content: Content) => {\n      const roomId = world.id;\n\n      setWorld({ type: \"LOAD\", roomId });\n\n      const maxObjectCap = content.max_member_object_cap;\n      let environmentUrl = content.scene_url;\n      let environmentScriptUrl = content.script_url;\n\n      if (typeof environmentUrl !== \"string\") {\n        throw new Error(\"3D scene does not exist for this world.\");\n      }\n\n      if (environmentUrl.startsWith(\"mxc:\")) {\n        environmentUrl = session.mediaRepository.mxcUrl(environmentUrl)!;\n      }\n\n      if (environmentScriptUrl && environmentScriptUrl.startsWith(\"mxc:\")) {\n        environmentScriptUrl = session.mediaRepository.mxcUrl(environmentScriptUrl)!;\n      }\n\n      try {\n        setActiveMatrixRoom(mainThread, session, world.id);\n\n        const [matrixNetworkInterface] = await Promise.all([\n          createMatrixNetworkInterface(mainThread, client, platform, world),\n          loadWorld(mainThread, environmentUrl, {\n            environmentScriptUrl,\n            maxObjectCap,\n          }),\n        ]);\n\n        registerMatrixNetworkInterface(matrixNetworkInterface);\n\n        await enterWorld(mainThread, session.userId);\n\n        const audio = getModule(mainThread, AudioModule);\n        audio.context.resume().catch(() => console.error(\"Couldn't resume audio context\"));\n\n        setWorld({ type: \"ENTER\" });\n      } catch (err: any) {\n        throw new Error(err?.message ?? \"Unknown error loading world.\");\n      }\n    },\n    [mainThread, session, setWorld, client, platform]\n  );\n\n  // keeps the call established and reloads the scene/script\n  const reloadWorldCallback = useCallback(\n    async (world: Room, content: Content) => {\n      setWorld({ type: \"LOAD\", roomId: world.id });\n\n      disposeActiveMatrixRoom(mainThread);\n      setActiveMatrixRoom(mainThread, session, world.id);\n\n      const maxObjectCap = content.max_member_object_cap;\n      let environmentUrl = content.scene_url;\n      let environmentScriptUrl = content.script_url;\n\n      if (typeof environmentUrl !== \"string\") {\n        throw new Error(\"3D scene does not exist for this world.\");\n      }\n\n      if (environmentUrl.startsWith(\"mxc:\")) {\n        environmentUrl = session.mediaRepository.mxcUrl(environmentUrl)!;\n      }\n\n      if (environmentScriptUrl && environmentScriptUrl.startsWith(\"mxc:\")) {\n        environmentScriptUrl = session.mediaRepository.mxcUrl(environmentScriptUrl)!;\n      }\n\n      await reloadWorld(mainThread, environmentUrl, {\n        environmentScriptUrl,\n        maxObjectCap,\n      });\n\n      setWorld({ type: \"ENTER\" });\n    },\n    [setWorld, mainThread, session]\n  );\n\n  return {\n    loadAndEnterWorld: loadAndEnterWorldCallback,\n    exitWorld: exitWorldCallback,\n    reloadWorld: reloadWorldCallback,\n  };\n}\n","import { atom } from \"jotai\";\n\nexport const overlayVisibilityAtom = atom<boolean>(true);\n"],"names":["baseWorldAtom","atom","worldAtom","get","set","action","editorAtom","baseOpenedChatAtom","openedChatAtom","baseActiveChats","activeChatsAtom","produce","draftChats","baseOverlayWorldAtom","overlayWorldAtom","value","openedChatId","memberComparator","a","b","isOlderThanLocalHost","groupCall","member","getReliableHost","sortedMembers","getWorldGroupCall","session","world","getRoomCall","createMatrixNetworkInterface","ctx","client","platform","CallIntent","stream","err","localMedia","LocalMedia","_a","setLocalMediaStream","_b","unsubscibeMembersObservable","userId","initialHostId","getInitialHost","joinWorld","resolve","timeout","reliableHost","unsubscribe","host","isHost","setHost","_key","updateHost","addPeer","removePeer","hasPeer","disconnect","exitWorld","baseMxNetworkInterface","registerMatrixNetworkInterface","matrixNetworkInterface","provideMatrixNetworkInterface","update","useWorldLoader","useHydrogen","mainThread","useMainThreadContext","setWorld","useSetAtom","exitWorldCallback","useCallback","disposeActiveMatrixRoom","loadAndEnterWorldCallback","content","roomId","maxObjectCap","environmentUrl","environmentScriptUrl","setActiveMatrixRoom","loadWorld","enterWorld","getModule","AudioModule","reloadWorldCallback","reloadWorld","overlayVisibilityAtom"],"mappings":"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"}