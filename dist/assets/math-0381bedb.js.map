{"version":3,"file":"math-0381bedb.js","sources":["../../src/engine/common/math.ts"],"sourcesContent":["import { vec3, quat, mat4 } from \"gl-matrix\";\n\nexport const Axes = {\n  X: vec3.fromValues(1, 0, 0),\n  Y: vec3.fromValues(0, 1, 0),\n  Z: vec3.fromValues(0, 0, 1),\n};\nconst { sin, cos } = Math;\nconst EulerOrder = [\"XYZ\", \"YZX\", \"ZXY\", \"XZY\", \"YXZ\", \"ZYX\"];\n\nexport const setQuaternionFromEuler = (quaternion: quat, rotation: vec3) => {\n  const [x, y, z, o] = rotation;\n  const order = EulerOrder[o] || \"XYZ\";\n\n  const c1 = cos(x / 2);\n  const c2 = cos(y / 2);\n  const c3 = cos(z / 2);\n\n  const s1 = sin(x / 2);\n  const s2 = sin(y / 2);\n  const s3 = sin(z / 2);\n\n  switch (order) {\n    case \"XYZ\":\n      quaternion[0] = s1 * c2 * c3 + c1 * s2 * s3;\n      quaternion[1] = c1 * s2 * c3 - s1 * c2 * s3;\n      quaternion[2] = c1 * c2 * s3 + s1 * s2 * c3;\n      quaternion[3] = c1 * c2 * c3 - s1 * s2 * s3;\n      break;\n\n    case \"YXZ\":\n      quaternion[0] = s1 * c2 * c3 + c1 * s2 * s3;\n      quaternion[1] = c1 * s2 * c3 - s1 * c2 * s3;\n      quaternion[2] = c1 * c2 * s3 - s1 * s2 * c3;\n      quaternion[3] = c1 * c2 * c3 + s1 * s2 * s3;\n      break;\n\n    case \"ZXY\":\n      quaternion[0] = s1 * c2 * c3 - c1 * s2 * s3;\n      quaternion[1] = c1 * s2 * c3 + s1 * c2 * s3;\n      quaternion[2] = c1 * c2 * s3 + s1 * s2 * c3;\n      quaternion[3] = c1 * c2 * c3 - s1 * s2 * s3;\n      break;\n\n    case \"ZYX\":\n      quaternion[0] = s1 * c2 * c3 - c1 * s2 * s3;\n      quaternion[1] = c1 * s2 * c3 + s1 * c2 * s3;\n      quaternion[2] = c1 * c2 * s3 - s1 * s2 * c3;\n      quaternion[3] = c1 * c2 * c3 + s1 * s2 * s3;\n      break;\n\n    case \"YZX\":\n      quaternion[0] = s1 * c2 * c3 + c1 * s2 * s3;\n      quaternion[1] = c1 * s2 * c3 + s1 * c2 * s3;\n      quaternion[2] = c1 * c2 * s3 - s1 * s2 * c3;\n      quaternion[3] = c1 * c2 * c3 - s1 * s2 * s3;\n      break;\n\n    case \"XZY\":\n      quaternion[0] = s1 * c2 * c3 - c1 * s2 * s3;\n      quaternion[1] = c1 * s2 * c3 - s1 * c2 * s3;\n      quaternion[2] = c1 * c2 * s3 + s1 * s2 * c3;\n      quaternion[3] = c1 * c2 * c3 + s1 * s2 * s3;\n      break;\n  }\n};\n\nexport function clamp(value: number, min: number, max: number) {\n  return Math.max(min, Math.min(max, value));\n}\n\nexport function setEulerFromTransformMatrix(rotation: vec3, matrix: mat4) {\n  const order = EulerOrder[rotation[3]] || \"XYZ\";\n\n  // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n  const te = matrix;\n\n  const m11 = te[0];\n  const m12 = te[4];\n  const m13 = te[8];\n  const m21 = te[1];\n  const m22 = te[5];\n  const m23 = te[9];\n  const m31 = te[2];\n  const m32 = te[6];\n  const m33 = te[10];\n\n  switch (order) {\n    case \"XYZ\":\n      rotation[1] = Math.asin(clamp(m13, -1, 1));\n\n      if (Math.abs(m13) < 0.9999999) {\n        rotation[0] = Math.atan2(-m23, m33);\n        rotation[2] = Math.atan2(-m12, m11);\n      } else {\n        rotation[0] = Math.atan2(m32, m22);\n        rotation[2] = 0;\n      }\n\n      break;\n\n    case \"YXZ\":\n      rotation[0] = Math.asin(-clamp(m23, -1, 1));\n\n      if (Math.abs(m23) < 0.9999999) {\n        rotation[1] = Math.atan2(m13, m33);\n        rotation[2] = Math.atan2(m21, m22);\n      } else {\n        rotation[1] = Math.atan2(-m31, m11);\n        rotation[2] = 0;\n      }\n\n      break;\n\n    case \"ZXY\":\n      rotation[0] = Math.asin(clamp(m32, -1, 1));\n\n      if (Math.abs(m32) < 0.9999999) {\n        rotation[1] = Math.atan2(-m31, m33);\n        rotation[2] = Math.atan2(-m12, m22);\n      } else {\n        rotation[1] = 0;\n        rotation[2] = Math.atan2(m21, m11);\n      }\n\n      break;\n\n    case \"ZYX\":\n      rotation[1] = Math.asin(-clamp(m31, -1, 1));\n\n      if (Math.abs(m31) < 0.9999999) {\n        rotation[0] = Math.atan2(m32, m33);\n        rotation[2] = Math.atan2(m21, m11);\n      } else {\n        rotation[0] = 0;\n        rotation[2] = Math.atan2(-m12, m22);\n      }\n\n      break;\n\n    case \"YZX\":\n      rotation[2] = Math.asin(clamp(m21, -1, 1));\n\n      if (Math.abs(m21) < 0.9999999) {\n        rotation[0] = Math.atan2(-m23, m22);\n        rotation[1] = Math.atan2(-m31, m11);\n      } else {\n        rotation[0] = 0;\n        rotation[1] = Math.atan2(m13, m33);\n      }\n\n      break;\n\n    case \"XZY\":\n      rotation[2] = Math.asin(-clamp(m12, -1, 1));\n\n      if (Math.abs(m12) < 0.9999999) {\n        rotation[0] = Math.atan2(m32, m22);\n        rotation[1] = Math.atan2(m13, m11);\n      } else {\n        rotation[0] = Math.atan2(-m23, m33);\n        rotation[1] = 0;\n      }\n\n      break;\n  }\n\n  return rotation;\n}\nexport const tempMat4 = mat4.create();\nexport const tempVec3 = vec3.create();\nexport const tempQuat = quat.create();\nexport const defaultUp = vec3.set(vec3.create(), 0, 1, 0);\n\nexport function setEulerFromQuaternion(rotation: Float32Array | vec3, quaternion: Float32Array | quat) {\n  mat4.fromQuat(tempMat4, quaternion);\n  setEulerFromTransformMatrix(rotation, tempMat4);\n}\n\nexport const RAD2DEG = 180 / Math.PI;\nexport const DEG2RAD = Math.PI / 180;\n\nexport function getDirection(out: vec3, matrix: mat4): vec3 {\n  vec3.set(out, matrix[8], matrix[9], matrix[10]);\n  return vec3.normalize(out, out);\n}\n/*\nnotes on calculating forward/up/right:\n\n  forward.x =  cos(pitch) * sin(yaw);\n  forward.y = -sin(pitch);\n  forward.z =  cos(pitch) * cos(yaw);\n\n  right.x =  cos(yaw);\n  right.y =  0;\n  right.z = -sin(yaw);\n\n  up = cross(forward, right);\n\n  equivalent:\n  up.x = sin(pitch) * sin(yaw);\n  up.y = cos(pitch);\n  up.z = sin(pitch) * cos(yaw);\n*/\n\nexport const getPitch = ([x, y, z, w]: quat) => Math.atan2(2 * x * w - 2 * y * z, 1 - 2 * x * x - 2 * z * z);\nexport const getYaw = ([x, y, z, w]: quat) => Math.atan2(2 * y * w - 2 * x * z, 1 - 2 * y * y - 2 * z * z);\nexport const getRoll = ([x, y, z, w]: quat) => Math.asin(2 * x * y + 2 * z * w);\n\nexport function getForwardVector(out: vec3, pitch: number, roll: number) {\n  return vec3.set(out, -Math.cos(pitch) * Math.sin(roll), Math.sin(pitch), -Math.cos(pitch) * Math.cos(roll));\n}\n\nexport function getRightVector(out: vec3, roll: number) {\n  return vec3.set(out, Math.cos(roll), 0, -Math.sin(roll));\n}\n\nexport function domPointToVec3(out: vec3, point: DOMPointReadOnly): vec3 {\n  out[0] = point.x;\n  out[1] = point.y;\n  out[2] = point.z;\n  return out;\n}\n\nexport function domPointToQuat(out: quat, point: DOMPointReadOnly): quat {\n  out[0] = point.x;\n  out[1] = point.y;\n  out[2] = point.z;\n  out[3] = point.w;\n  return out;\n}\n\nexport interface DOMPointReadOnlyLike {\n  readonly x: number;\n  readonly y: number;\n  readonly z: number;\n  readonly w: number;\n}\n\nexport function vec3ToDOMPoint(vec: vec3): DOMPointReadOnlyLike {\n  return {\n    x: vec[0],\n    y: vec[1],\n    z: vec[2],\n    w: 1,\n  };\n}\n\nexport function quatToDOMPoint(quat: quat): DOMPointReadOnlyLike {\n  return {\n    x: quat[0],\n    y: quat[1],\n    z: quat[2],\n    w: quat[3],\n  };\n}\n"],"names":["vec3.fromValues","sin","cos","EulerOrder","setQuaternionFromEuler","quaternion","rotation","x","y","z","o","order","c1","c2","c3","s1","s2","s3","clamp","value","min","max","setEulerFromTransformMatrix","matrix","te","m11","m12","m13","m21","m22","m23","m31","m32","m33","tempMat4","mat4.create","vec3.create","quat.create","vec3.set","setEulerFromQuaternion","mat4.fromQuat","getYaw","w","domPointToVec3","out","point","domPointToQuat","vec3ToDOMPoint","vec","quatToDOMPoint","quat"],"mappings":"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"}