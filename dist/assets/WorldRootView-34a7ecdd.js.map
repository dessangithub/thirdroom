{"version":3,"file":"WorldRootView-34a7ecdd.js","sources":["../../src/engine/utils/fetchWithProgress.game.ts","../../src/ui/views/session/world/WorldLoading.tsx","../../src/ui/views/session/world-chat/tiles/TextMessageView.ts","../../src/ui/views/session/world-chat/tiles/AnnouncementView.ts","../../src/ui/views/session/world-chat/tiles/WorldChatGap.ts","../../src/ui/views/session/world-chat/tiles/ChatDate.ts","../../src/ui/views/session/world-chat/tiles/index.tsx","../../src/ui/views/session/world-chat/WorldChatTimeline.tsx","../../src/ui/views/session/world-chat/WorldChatComposer.tsx","../../src/ui/hooks/usePreviousState.ts","../../src/ui/views/session/world-chat/WorldChat.tsx","../../src/ui/hooks/useToast.ts","../../src/ui/hooks/useWebXRSession.ts","../../src/ui/views/components/hotbar/Hotbar.tsx","../../res/ic/subtitles.svg","../../res/ic/subtitles-off.svg","../../res/ic/help.svg","../../res/ic/xr.svg","../../src/ui/hooks/useActionBar.ts","../../src/ui/views/session/world/WorldControls.tsx","../../src/ui/hooks/useOnboarding.ts","../../src/ui/atoms/pagination/PaginationDot.tsx","../../src/ui/views/session/world/OnboardingModal.tsx","../../src/ui/views/session/world/WorldOnboarding.tsx","../../src/ui/views/session/world/WorldInteraction.tsx","../../src/ui/views/session/world/WorldView.tsx","../../src/ui/views/session/world/WorldRootView.tsx"],"sourcesContent":["import { GameContext } from \"../GameTypes\";\nimport { Thread } from \"../module/module.common\";\n\nexport const FetchProgressMessageType = \"fetch-progress-message\";\n\nexport interface FetchProgressMessage {\n  type: typeof FetchProgressMessageType;\n  status: { loaded: number; total: number };\n}\n\nfunction reportStatus(ctx: GameContext, status: { loaded: number; total: number }) {\n  ctx.sendMessage<FetchProgressMessage>(Thread.Main, {\n    type: FetchProgressMessageType,\n    status,\n  });\n}\n\nexport async function fetchWithProgress(ctx: GameContext, url: string, options?: RequestInit): Promise<Response> {\n  const status = { loaded: 0, total: 0 };\n\n  const response = await fetch(url, options);\n  const contentLength = response.headers.get(\"content-length\");\n  const total = parseInt(contentLength || \"0\", 10);\n\n  status.total = total;\n  reportStatus(ctx, status);\n\n  let loaded = 0;\n\n  const res = new Response(\n    new ReadableStream({\n      async start(controller) {\n        const reader = response.body?.getReader();\n        if (reader)\n          for (;;) {\n            const { done, value } = await reader.read();\n            if (done) break;\n            loaded += value.byteLength;\n            status.loaded = loaded;\n            reportStatus(ctx, status);\n            controller.enqueue(value);\n          }\n        controller.close();\n      },\n    })\n  );\n\n  return res;\n}\n","import { useCallback, useEffect, useState } from \"react\";\nimport { Room } from \"@thirdroom/hydrogen-view-sdk\";\nimport { useAtom } from \"jotai\";\n\nimport { MainContext } from \"../../../../engine/MainThread\";\nimport { registerMessageHandler } from \"../../../../engine/module/module.common\";\nimport { FetchProgressMessage, FetchProgressMessageType } from \"../../../../engine/utils/fetchWithProgress.game\";\nimport { Progress } from \"../../../atoms/progress/Progress\";\nimport { Text } from \"../../../atoms/text/Text\";\nimport { useMainThreadContext } from \"../../../hooks/useMainThread\";\nimport { bytesToSize, getPercentage } from \"../../../utils/common\";\nimport \"./WorldLoading.css\";\nimport { Button } from \"../../../atoms/button/Button\";\nimport { WorldPreviewCard } from \"../../components/world-preview-card/WorldPreviewCard\";\nimport { overlayVisibilityAtom } from \"../../../state/overlayVisibility\";\nimport { useWorldNavigator } from \"../../../hooks/useWorldNavigator\";\nimport { useHydrogen } from \"../../../hooks/useHydrogen\";\n\ninterface WorldLoadProgress {\n  loaded: number;\n  total: number;\n}\n\nfunction useWorldLoadingProgress(): [() => void, WorldLoadProgress] {\n  const engine = useMainThreadContext();\n  const [loadProgress, setLoadProgress] = useState<WorldLoadProgress>({ loaded: 0, total: 0 });\n\n  useEffect(() => {\n    const onFetchProgress = (ctx: MainContext, message: FetchProgressMessage) => {\n      setLoadProgress(message.status);\n    };\n    return registerMessageHandler(engine, FetchProgressMessageType, onFetchProgress);\n  }, [engine]);\n\n  const reset = useCallback(() => {\n    setLoadProgress({ loaded: 0, total: 0 });\n  }, []);\n\n  return [reset, loadProgress];\n}\n\nexport function WorldLoading({ world, loading, error }: { world: Room; loading: boolean; error?: Error }) {\n  const [overlayVisible] = useAtom(overlayVisibilityAtom);\n  const [resetLoadProgress, loadProgress] = useWorldLoadingProgress();\n  const [creator, setCreator] = useState<string>();\n  const { session } = useHydrogen(true);\n  const { navigateEnterWorld, navigateExitWorld } = useWorldNavigator(session);\n\n  useEffect(() => {\n    resetLoadProgress();\n  }, [resetLoadProgress, loading]);\n\n  useEffect(() => {\n    let disposed = false;\n    world?.getStateEvent(\"m.room.create\", \"\").then((stateEvent) => {\n      if (disposed) return;\n      const creatorId = stateEvent?.event.sender;\n      if (!creatorId) return;\n      setCreator(creatorId);\n    });\n    return () => {\n      disposed = true;\n    };\n  }, [world]);\n\n  if (overlayVisible) return null;\n\n  return (\n    <>\n      {error && (\n        <div className=\"WorldLoading flex justify-center\">\n          <WorldPreviewCard\n            title={world.name ?? world.canonicalAlias ?? \"Unknown World\"}\n            desc={error.message}\n            options={\n              <div className=\"flex gap-xxs\">\n                <Button onClick={navigateExitWorld} fill=\"outline\">\n                  Exit\n                </Button>\n                <Button\n                  onClick={() => {\n                    navigateEnterWorld(world, { reload: true });\n                  }}\n                >\n                  Reload\n                </Button>\n              </div>\n            }\n          />\n        </div>\n      )}\n      {!error && loading && (\n        <div className=\"WorldLoading flex justify-center\">\n          <WorldPreviewCard\n            title={world.name ?? world.canonicalAlias ?? \"Unknown World\"}\n            desc={creator ? `Created by ${creator}` : undefined}\n            content={\n              <div className=\"flex flex-column gap-xs\">\n                <Progress\n                  variant=\"secondary\"\n                  max={100}\n                  value={getPercentage(loadProgress.total, loadProgress.loaded)}\n                />\n                <div className=\"flex justify-between gap-md\">\n                  <Text variant=\"b3\">{`Loading Scene: ${getPercentage(\n                    loadProgress.total,\n                    loadProgress.loaded\n                  )}%`}</Text>\n                  <Text variant=\"b3\">{`${bytesToSize(loadProgress.loaded)} / ${bytesToSize(loadProgress.total)}`}</Text>\n                </div>\n              </div>\n            }\n            options={\n              <div className=\"flex gap-xxs\">\n                <Button onClick={navigateExitWorld} fill=\"outline\">\n                  Cancel\n                </Button>\n              </div>\n            }\n          />\n        </div>\n      )}\n    </>\n  );\n}\n","import { TemplateView, TextTile, Builder, TileView } from \"@thirdroom/hydrogen-view-sdk\";\nimport classNames from \"classnames\";\n\nimport { linkifyText } from \"../../../../utils/common\";\nimport \"./TextMessageView.css\";\n\nexport class TextMessageView extends TemplateView<TextTile> implements TileView {\n  constructor(vm: TextTile) {\n    super(vm);\n  }\n\n  render(t: Builder<TextTile>, vm: TextTile): Element {\n    const isEmote = vm._getContent()?.msgtype === \"m.emote\";\n\n    let body = isEmote ? `* ${vm.displayName} ` : \"\";\n    body += vm._getPlainBody?.();\n\n    return t.li(\n      { className: classNames(\"WorldChat__TextMessageView\", { \"WorldChat__TextMessageView--emote\": isEmote }) },\n      t.div({ className: \"Text Text-b2 Text--world Text--regular\" }, [\n        isEmote\n          ? \"\"\n          : t.span(\n              { className: \"WorldChat__TextMessageView-sender Text Text-b2 Text--world Text--semi-bold\" },\n              `${vm.displayName}:`\n            ),\n        t.span(linkifyText(body) || \"*** EMPTY MESSAGE ***\"),\n      ])\n    );\n  }\n  onClick() {}\n}\n","import { TemplateView, RoomMemberTile, Builder } from \"@thirdroom/hydrogen-view-sdk\";\nimport \"./AnnouncementView.css\";\n\nexport class AnnouncementView extends TemplateView<RoomMemberTile> {\n  constructor(vm: RoomMemberTile) {\n    super(vm);\n  }\n\n  render(t: Builder<RoomMemberTile>, vm: RoomMemberTile): Element {\n    return t.li(\n      { className: \"WorldChat__AnnouncementView\" },\n      t.div({ className: \"Text Text-b2 Text--world Text--regular\" }, vm.announcement)\n    );\n  }\n\n  onClick() {}\n}\n","import { TemplateView, GapTile, Builder, TileView } from \"@thirdroom/hydrogen-view-sdk\";\n\nimport \"./WorldChatGap.css\";\nexport class WorldChatGap extends TemplateView<GapTile> implements TileView {\n  constructor(vm: GapTile) {\n    super(vm);\n  }\n\n  render(t: Builder<GapTile>, vm: GapTile) {\n    return t.li(\n      { className: \"WorldChatGap flex item-center\" },\n      t.p({ className: \"Text Text-b2 Text--world Text--semi-bold\" }, [\n        (vm) => (vm.isLoading ? \"Loading more messages...\" : \"Not loading!\"),\n        (vm) => (vm.error ? vm.error : \"\"),\n      ])\n    );\n  }\n\n  onClick() {}\n}\n","import { TemplateView, DateTile, Builder } from \"@thirdroom/hydrogen-view-sdk\";\n\nexport class ChatDate extends TemplateView<DateTile> {\n  constructor(vm: DateTile) {\n    super(vm);\n  }\n\n  render(t: Builder<DateTile>, vm: DateTile) {\n    return t.span({ className: \"inline-flex\" }, \"\");\n  }\n\n  onClick() {}\n}\n","import { SimpleTile, TileViewConstructor } from \"@thirdroom/hydrogen-view-sdk\";\n\nimport { TextMessageView } from \"./TextMessageView\";\nimport { AnnouncementView } from \"./AnnouncementView\";\nimport { WorldChatGap } from \"./WorldChatGap\";\nimport { ChatDate } from \"./ChatDate\";\n\nexport function viewClassForTile(vm: SimpleTile): TileViewConstructor<any> {\n  switch (vm.shape) {\n    case \"gap\":\n      return WorldChatGap;\n    case \"announcement\":\n      return AnnouncementView;\n    case \"message\":\n    case \"message-status\":\n      return TextMessageView;\n    case \"date-header\":\n      return ChatDate;\n    default:\n      throw new Error(\n        `Tiles of shape \"${vm.shape}\" are not supported, check the tileClassForEntry function in the view model`\n      );\n  }\n}\n","import { useRef } from \"react\";\nimport { TimelineViewModel } from \"@thirdroom/hydrogen-view-sdk\";\n\nimport \"./WorldChatTimeline.css\";\nimport { useEmbedTimeline } from \"../../../hooks/useEmbedTimeline\";\nimport { viewClassForTile } from \"./tiles\";\n\ninterface IWorldChatTimeline {\n  timelineViewModel: TimelineViewModel;\n}\n\nexport function WorldChatTimeline({ timelineViewModel }: IWorldChatTimeline) {\n  const timelineViewContainerRef = useRef<HTMLDivElement>(null);\n  useEmbedTimeline(timelineViewContainerRef, timelineViewModel, viewClassForTile);\n\n  return <div className=\"WorldChatTimeline grow flex\" ref={timelineViewContainerRef} />;\n}\n","import { FormEvent } from \"react\";\nimport { ComposerViewModel } from \"@thirdroom/hydrogen-view-sdk\";\n\nimport \"./WorldChatComposer.css\";\n\ninterface IWorldChatComposer {\n  composerViewModel: ComposerViewModel;\n}\n\nexport function WorldChatComposer({ composerViewModel }: IWorldChatComposer) {\n  const handleSubmit = (ev: FormEvent) => {\n    ev.preventDefault();\n    const target = ev.target as typeof ev.target & {\n      message: { value: string };\n    };\n    const message = target.message.value.trim();\n    if (message === \"\") return;\n    target.message.value = \"\";\n    composerViewModel.sendMessage(message);\n  };\n\n  return (\n    <form className=\"WorldChatComposer grow\" onSubmit={handleSubmit}>\n      <input\n        className=\"Text Text-b2 Text--world Text-regular\"\n        name=\"message\"\n        type=\"text\"\n        placeholder=\"\"\n        autoComplete=\"off\"\n        autoFocus\n      />\n    </form>\n  );\n}\n","import { useEffect, useRef } from \"react\";\n\nexport function usePreviousState<T>(value: T) {\n  const valueRef = useRef<T>();\n  useEffect(() => {\n    valueRef.current = value;\n  }, [value]);\n  return valueRef.current;\n}\n","import { useReducer, useRef } from \"react\";\nimport { Room } from \"@thirdroom/hydrogen-view-sdk\";\n\nimport \"./WorldChat.css\";\nimport { WorldChatTimeline } from \"./WorldChatTimeline\";\nimport { WorldChatComposer } from \"./WorldChatComposer\";\nimport { useRoomViewModel, worldChatTileClassForEntry } from \"../../../hooks/useRoomViewModel\";\nimport { Text } from \"../../../atoms/text/Text\";\nimport { Icon } from \"../../../atoms/icon/Icon\";\nimport MessageIC from \"../../../../../res/ic/message.svg\";\nimport { useRecentMessage } from \"../../../hooks/useRecentMessage\";\nimport { usePreviousState } from \"../../../hooks/usePreviousState\";\n\nfunction useRecentMessages(room?: Room, maxCount = 5) {\n  const eventsRef = useRef<any[]>([]);\n  const [, forceUpdate] = useReducer((state) => state + 1, 0);\n\n  const eventEntry = useRecentMessage(room);\n  const prevEventEntry = usePreviousState(eventEntry);\n\n  if (prevEventEntry && eventEntry && eventEntry !== prevEventEntry) {\n    if (eventsRef.current.length >= maxCount) {\n      eventsRef.current.shift();\n    }\n    eventsRef.current.push(eventEntry);\n    setTimeout(() => {\n      eventsRef.current.shift();\n      forceUpdate();\n    }, 5000);\n  }\n\n  if (!room) {\n    eventsRef.current = [];\n  }\n\n  return eventsRef.current;\n}\n\ninterface IWorldChat {\n  open: boolean;\n  room: Room;\n}\n\nexport function WorldChat({ room, open }: IWorldChat) {\n  const { loading, roomViewModel, error } = useRoomViewModel(room, worldChatTileClassForEntry);\n  const events = useRecentMessages(open ? undefined : room, 5);\n\n  const renderTimeline = () =>\n    error ? (\n      <div className=\"grow flex justify-center items-center\">\n        <Text>{error.message}</Text>\n      </div>\n    ) : loading || !roomViewModel ? (\n      <div className=\"grow flex justify-center items-center\">\n        <Text>loading...</Text>\n      </div>\n    ) : (\n      <WorldChatTimeline timelineViewModel={roomViewModel.timelineViewModel!} />\n    );\n\n  const renderTimelinePreview = () =>\n    events.length > 0 && (\n      <div className=\"grow flex items-end\" style={{ padding: \"var(--sp-xs) 0\" }}>\n        <div className=\"flex flex-column items-start justify-end gap-xs\">\n          {events.map((eventEntry) => (\n            <li key={eventEntry.id} className=\"WorldChat__TextMessageView\">\n              <div className=\"Text Text-b2 Text--world Text--regular\">\n                <span className=\"WorldChat__TextMessageView-sender Text Text-b2 Text--world Text--semi-bold\">\n                  {eventEntry.displayName}\n                </span>\n                {eventEntry.content.body}\n              </div>\n            </li>\n          ))}\n        </div>\n      </div>\n    );\n\n  return (\n    <div className=\"WorldChat flex flex-column justify-end\" id=\"WorldChat\">\n      {open ? renderTimeline() : renderTimelinePreview()}\n      <div className=\"WorldChat__input flex items-center\">\n        <Icon color=\"world\" src={MessageIC} size=\"sm\" />\n        {open && roomViewModel ? (\n          <>\n            <WorldChatComposer composerViewModel={roomViewModel.composerViewModel} />\n            <Text variant=\"b3\" color=\"world\" weight=\"bold\" className=\"uppercase\">\n              Enter\n            </Text>\n          </>\n        ) : (\n          <Text variant=\"b2\" color=\"world\">\n            Press <b>Enter</b> to chat\n          </Text>\n        )}\n      </div>\n    </div>\n  );\n}\n","import { useState, useRef, useCallback, ReactNode } from \"react\";\n\nimport { useIsMounted } from \"./useIsMounted\";\n\nexport function useToast() {\n  const [{ toastShown, toastContent }, setToastState] = useState<{ toastShown: boolean; toastContent: ReactNode }>({\n    toastShown: false,\n    toastContent: \"\",\n  });\n  const isMounted = useIsMounted();\n  const toastTimeoutRef = useRef<number>();\n\n  const showToast = useCallback(\n    (toastContent: ReactNode) => {\n      setToastState({\n        toastShown: true,\n        toastContent,\n      });\n\n      clearTimeout(toastTimeoutRef.current);\n\n      toastTimeoutRef.current = window.setTimeout(() => {\n        if (isMounted()) {\n          setToastState((state) => ({ ...state, toastShown: false }));\n        }\n      }, 2000);\n    },\n    [isMounted]\n  );\n\n  return { toastShown, toastContent, showToast };\n}\n","import { useEffect, useState } from \"react\";\n\nimport { Thread } from \"../../engine/module/module.common\";\nimport { EnterXRMessage, RendererMessageType } from \"../../engine/renderer/renderer.common\";\nimport { useAsyncCallback } from \"./useAsyncCallback\";\nimport { useLocalStorage } from \"./useLocalStorage\";\nimport { useMainThreadContext } from \"./useMainThread\";\n\nconst DefaultXRInit = { optionalFeatures: [\"local-floor\", \"bounded-floor\", \"hand-tracking\", \"layers\"] };\n\nexport function useWebXRSession() {\n  const ctx = useMainThreadContext();\n  const [immersiveAR] = useLocalStorage(\"feature_immersiveAR\", false);\n\n  const [isPresenting, setIsPresenting] = useState(false);\n\n  const {\n    callback: enterXR,\n    loading: enteringXR,\n    value: session,\n    error: webXRSessionError,\n  } = useAsyncCallback<() => Promise<XRSession | undefined>, XRSession | undefined>(async () => {\n    if (\"xr\" in navigator && navigator.xr && ctx.supportedXRSessionModes) {\n      if (isPresenting) {\n        return;\n      }\n\n      const mode =\n        immersiveAR && ctx.supportedXRSessionModes.includes(\"immersive-ar\") ? \"immersive-ar\" : \"immersive-vr\";\n\n      console.log(immersiveAR, ctx.supportedXRSessionModes);\n\n      const session = await navigator.xr.requestSession(mode, DefaultXRInit);\n\n      ctx.sendMessage<EnterXRMessage>(Thread.Render, {\n        type: RendererMessageType.EnterXR,\n        session,\n        mode,\n      });\n\n      return session;\n    }\n\n    return undefined;\n  }, [ctx, isPresenting, immersiveAR]);\n\n  useEffect(() => {\n    if (session) {\n      setIsPresenting(true);\n\n      const onSessionEnd = () => setIsPresenting(false);\n\n      session.addEventListener(\"end\", onSessionEnd);\n\n      return () => {\n        session.removeEventListener(\"end\", onSessionEnd);\n      };\n    }\n  }, [session]);\n\n  return {\n    enteringXR,\n    isPresenting,\n    isWebXRSupported: !!ctx.supportedXRSessionModes,\n    error: webXRSessionError,\n    enterXR,\n  };\n}\n","import { ReactNode } from \"react\";\n\nimport { Text } from \"../../../atoms/text/Text\";\nimport { ThumbnailImg } from \"../../../atoms/thumbnail/ThumbnailImg\";\nimport { Tooltip } from \"../../../atoms/tooltip/Tooltip\";\nimport \"./Hotbar.css\";\n\ninterface HotbarSlotProps {\n  imageSrc: string;\n  label?: string;\n  shortcutKey: string | number;\n}\n\nexport function HotbarSlot({ imageSrc, label = \"Object\", shortcutKey }: HotbarSlotProps) {\n  return (\n    <div className=\"HotbarSlot flex items-center\">\n      <Tooltip content={label}>\n        <ThumbnailImg src={imageSrc} alt={label} />\n      </Tooltip>\n      <Text className=\"HotbarSlot__key\" variant=\"b3\" color=\"world\" weight=\"bold\">\n        {shortcutKey}\n      </Text>\n    </div>\n  );\n}\n\nexport function Hotbar({ children }: { children: ReactNode }) {\n  return <div className=\"Hotbar flex gap-sm\">{children}</div>;\n}\n","export default \"__VITE_ASSET__e1306422__\"","export default \"__VITE_ASSET__87a1f5b5__\"","export default \"__VITE_ASSET__c219f887__\"","export default \"__VITE_ASSET__231de166__\"","import { useEffect, useState } from \"react\";\n\nimport { getModule, registerMessageHandler } from \"../../engine/module/module.common\";\nimport {\n  ActionBarItem,\n  SetActionBarItemsMessage,\n  ThirdRoomMessageType,\n} from \"../../plugins/thirdroom/thirdroom.common\";\nimport { ThirdroomModule } from \"../../plugins/thirdroom/thirdroom.main\";\nimport { useMainThreadContext } from \"./useMainThread\";\n\nexport function useActionBar() {\n  const mainThread = useMainThreadContext();\n  const [actionBarItems, setActionBarItems] = useState<ActionBarItem[]>([]);\n\n  useEffect(() => {\n    const { actionBarItems } = getModule(mainThread, ThirdroomModule);\n    setActionBarItems(actionBarItems);\n\n    return registerMessageHandler(\n      mainThread,\n      ThirdRoomMessageType.SetActionBarItems,\n      (ctx, message: SetActionBarItemsMessage) => {\n        setActionBarItems(message.actionBarItems);\n      }\n    );\n  }, [mainThread]);\n\n  return actionBarItems;\n}\n","import { forwardRef, useCallback, useEffect, useState } from \"react\";\nimport { GroupCall, Room, Session } from \"@thirdroom/hydrogen-view-sdk\";\nimport classNames from \"classnames\";\n\nimport { IconButton } from \"../../../atoms/button/IconButton\";\nimport { Tooltip } from \"../../../atoms/tooltip/Tooltip\";\nimport { Hotbar, HotbarSlot } from \"../../components/hotbar/Hotbar\";\nimport PeopleIC from \"../../../../../res/ic/peoples.svg\";\nimport SubtitlesIC from \"../../../../../res/ic/subtitles.svg\";\nimport SubtitlesOffIC from \"../../../../../res/ic/subtitles-off.svg\";\nimport MicIC from \"../../../../../res/ic/mic.svg\";\nimport MicOffIC from \"../../../../../res/ic/mic-off.svg\";\nimport CallCrossIC from \"../../../../../res/ic/call-cross.svg\";\nimport CrossIC from \"../../../../../res/ic/cross.svg\";\nimport HelpIC from \"../../../../../res/ic/help.svg\";\nimport XRIC from \"../../../../../res/ic/xr.svg\";\nimport { Text } from \"../../../atoms/text/Text\";\nimport { NametagsEnableMessage, NametagsEnableMessageType } from \"../../../../engine/player/nametags.common\";\nimport { Thread } from \"../../../../engine/module/module.common\";\nimport { useMainThreadContext } from \"../../../hooks/useMainThread\";\nimport { HeaderTitle } from \"../../../atoms/header/HeaderTitle\";\nimport { Header } from \"../../../atoms/header/Header\";\nimport { Dialog } from \"../../../atoms/dialog/Dialog\";\nimport { Scroll } from \"../../../atoms/scroll/Scroll\";\nimport { ShortcutUI } from \"./ShortcutUI\";\nimport { MemberListDialog } from \"../dialogs/MemberListDialog\";\nimport { setLocalStorageItem } from \"../../../hooks/useLocalStorage\";\nimport { useKeyDown } from \"../../../hooks/useKeyDown\";\nimport { manageMuteRequest, MicExceptionDialog, useMuteButton } from \"../../components/MuteButtonProvider\";\nimport { inputFocused } from \"../../../utils/common\";\nimport { useDisableInput } from \"../../../hooks/useDisableInput\";\nimport { useWorldNavigator } from \"../../../hooks/useWorldNavigator\";\nimport { useActionBar } from \"../../../hooks/useActionBar\";\n\nexport function HotbarControls() {\n  const actionBarItems = useActionBar();\n\n  return (\n    <Hotbar>\n      {actionBarItems.map((item, index) => (\n        <HotbarSlot key={item.id} imageSrc={item.thumbnail} shortcutKey={index + 1} label={item.label} />\n      ))}\n    </Hotbar>\n  );\n}\n\nconst MuteButton = forwardRef<HTMLButtonElement, { activeCall?: GroupCall; showToast: (text: string) => void }>(\n  ({ activeCall, showToast }, ref) => {\n    const { mute, requestStream, handleMute, micException, setMicException } = useMuteButton(activeCall);\n\n    return (\n      <>\n        <MicExceptionDialog micException={micException} setMicException={setMicException} />\n        <Tooltip content={mute ? \"Unmute\" : \"Mute\"}>\n          <IconButton\n            variant=\"world\"\n            label=\"Mic\"\n            iconSrc={mute ? MicOffIC : MicIC}\n            onClick={() => {\n              showToast(!mute ? \"Microphone Muted\" : \"Microphone Unmuted\");\n              handleMute(async () => manageMuteRequest(requestStream, setMicException));\n            }}\n            ref={ref}\n          />\n        </Tooltip>\n      </>\n    );\n  }\n);\n\nexport function WorldControls({\n  className,\n  session,\n  activeCall,\n  world,\n  showToast,\n  isWebXRSupported,\n  enterXR,\n  showNames,\n  setShowNames,\n}: {\n  className?: string;\n  session: Session;\n  activeCall?: GroupCall;\n  world: Room;\n  showToast: (text: string) => void;\n  isWebXRSupported: boolean;\n  enterXR: () => void;\n  showNames: boolean;\n  setShowNames: setLocalStorageItem<boolean>;\n}) {\n  const mainThread = useMainThreadContext();\n  const { navigateExitWorld } = useWorldNavigator(session);\n\n  const [showActiveMembers, setShowActiveMembers] = useState<boolean>(false);\n  const [shortcutUI, setShortcutUI] = useState(false);\n\n  const toggleShowActiveMembers = () => setShowActiveMembers((state) => !state);\n  const toggleShortcutUI = () => setShortcutUI((state) => !state);\n  const toggleShowNames = useCallback(() => {\n    const enabled = !showNames;\n    setShowNames(enabled);\n    mainThread.sendMessage<NametagsEnableMessageType>(Thread.Game, { type: NametagsEnableMessage, enabled });\n    showToast(enabled ? \"Show Names\" : \"Hide Names\");\n  }, [mainThread, showNames, showToast, setShowNames]);\n\n  useEffect(() => {\n    mainThread.sendMessage<NametagsEnableMessageType>(Thread.Game, {\n      type: NametagsEnableMessage,\n      enabled: showNames,\n    });\n  }, [mainThread, showNames]);\n\n  useKeyDown(\n    (e) => {\n      if (inputFocused()) return;\n\n      if (e.altKey && e.code === \"KeyL\") {\n        navigateExitWorld();\n      }\n    },\n    [enterXR, isWebXRSupported]\n  );\n\n  useDisableInput(shortcutUI || showActiveMembers);\n\n  return (\n    <div className={classNames(className, \"flex\")}>\n      <div className=\"flex flex-column items-center\">\n        <Tooltip content={shortcutUI ? \"Hide Help\" : \"Show Help\"}>\n          <IconButton variant=\"world\" label=\"help\" iconSrc={HelpIC} onClick={toggleShortcutUI} />\n        </Tooltip>\n        <Text variant=\"b3\" color=\"world\" weight=\"bold\">\n          /\n        </Text>\n        <Dialog open={shortcutUI} onOpenChange={setShortcutUI}>\n          <Header\n            left={<HeaderTitle size=\"lg\">Controls</HeaderTitle>}\n            right={<IconButton iconSrc={CrossIC} onClick={toggleShortcutUI} label=\"Close\" />}\n          />\n          <div className=\"flex\" style={{ height: \"600px\" }}>\n            <Scroll type=\"hover\">\n              <ShortcutUI />\n            </Scroll>\n          </div>\n        </Dialog>\n      </div>\n      {isWebXRSupported && (\n        <div className=\"flex flex-column items-center\">\n          <Tooltip content=\"Enter XR\">\n            <IconButton variant=\"world\" label=\"Enter XR\" iconSrc={XRIC} onClick={enterXR} />\n          </Tooltip>\n          <Text variant=\"b3\" color=\"world\" weight=\"bold\">\n            Alt + X\n          </Text>\n        </div>\n      )}\n      <div className=\"flex flex-column items-center\">\n        <Tooltip content={showActiveMembers ? \"Hide Members\" : \"Show Members\"}>\n          <IconButton variant=\"world\" label=\"activeMembers\" iconSrc={PeopleIC} onClick={toggleShowActiveMembers} />\n        </Tooltip>\n        <Text variant=\"b3\" color=\"world\" weight=\"bold\">\n          P\n        </Text>\n        {!(\"isBeingCreated\" in world) && (\n          <Dialog open={showActiveMembers} onOpenChange={setShowActiveMembers}>\n            <MemberListDialog room={world} requestClose={() => setShowActiveMembers(false)} />\n          </Dialog>\n        )}\n      </div>\n      <div className=\"flex flex-column items-center\">\n        <Tooltip content={showNames ? \"Hide Names\" : \"Show Names\"}>\n          <IconButton\n            variant=\"world\"\n            label=\"Toggle Names\"\n            iconSrc={showNames ? SubtitlesIC : SubtitlesOffIC}\n            onClick={toggleShowNames}\n          />\n        </Tooltip>\n        <Text variant=\"b3\" color=\"world\" weight=\"bold\">\n          N\n        </Text>\n      </div>\n      {activeCall && (\n        <div className=\"flex flex-column items-center\">\n          <MuteButton showToast={showToast} activeCall={activeCall} />\n          <Text variant=\"b3\" color=\"world\" weight=\"bold\">\n            M\n          </Text>\n        </div>\n      )}\n      <div className=\"flex flex-column items-center\">\n        <Tooltip content=\"Disconnect\">\n          <IconButton variant=\"danger\" label=\"Disconnect\" iconSrc={CallCrossIC} onClick={navigateExitWorld} />\n        </Tooltip>\n        <Text variant=\"b3\" color=\"world\" weight=\"bold\">\n          Alt + L\n        </Text>\n      </div>\n    </div>\n  );\n}\n","import { useEffect, useState } from \"react\";\n\nimport { useHydrogen } from \"./useHydrogen\";\n\nconst ONBOARDING_KEY = \"io.thirdroom.onboarding\";\n\nexport function useOnboarding(worldId?: string) {\n  const { session, platform } = useHydrogen(true);\n  const [onboarding, setOnboarding] = useState(false);\n\n  useEffect(() => {\n    async function run() {\n      const homeAccountData = await session.getAccountData(\"org.matrix.msc3815.world.home\");\n      if (!homeAccountData) return;\n      if (homeAccountData.room_id !== worldId) return;\n\n      const onboardingData = await session.getAccountData(ONBOARDING_KEY);\n      const { onboardingVersion } = platform.config;\n      const lastOnboardingVersion = onboardingData?.version;\n\n      if (typeof lastOnboardingVersion !== \"number\" || lastOnboardingVersion < onboardingVersion) {\n        setOnboarding(true);\n      }\n    }\n\n    if (worldId) run().catch(console.error);\n  }, [worldId, session, platform.config]);\n\n  const finishOnboarding = () => {\n    setOnboarding(false);\n    session.setAccountData(ONBOARDING_KEY, {\n      version: platform.config.onboardingVersion,\n    });\n  };\n\n  return { onboarding, finishOnboarding };\n}\n","import classNames from \"classnames\";\n\nimport \"./PaginationDot.css\";\n\ninterface PaginationDotProps {\n  className?: string;\n  max: number;\n  value: number;\n}\n\nexport function PaginationDot({ className, max, value }: PaginationDotProps) {\n  return (\n    <div className={classNames(\"PaginationDot\", className)}>\n      {Array.from({ length: max }).map((item, index) => (\n        <span\n          key={index}\n          className={classNames(\"PaginationDot__item\", { \"PaginationDot__item--active\": index + 1 === value })}\n        />\n      ))}\n    </div>\n  );\n}\n","import { useState } from \"react\";\nimport { Room, RoomBeingCreated } from \"@thirdroom/hydrogen-view-sdk\";\n\nimport \"./OnboardingModal.css\";\nimport { Button } from \"../../../atoms/button/Button\";\nimport { Text } from \"../../../atoms/text/Text\";\nimport { Content } from \"../../../atoms/content/Content\";\nimport { Header } from \"../../../atoms/header/Header\";\nimport { Footer } from \"../../../atoms/footer/Footer\";\nimport { Scroll } from \"../../../atoms/scroll/Scroll\";\nimport { HeaderTitle } from \"../../../atoms/header/HeaderTitle\";\nimport { Avatar } from \"../../../atoms/avatar/Avatar\";\nimport { getAvatarHttpUrl, getIdentifierColorNumber } from \"../../../utils/avatar\";\nimport { useHydrogen } from \"../../../hooks/useHydrogen\";\nimport { PaginationDot } from \"../../../atoms/pagination/PaginationDot\";\nimport { ShortcutUI } from \"./ShortcutUI\";\nimport { Modal } from \"../../../atoms/modal/Modal\";\n\ninterface OnboardingModalProps {\n  open: boolean;\n  requestClose: () => void;\n  world: Room | RoomBeingCreated;\n}\n\nexport function OnboardingModal({ open, world, requestClose }: OnboardingModalProps) {\n  const { platform } = useHydrogen(true);\n  const [screenNo, setScreenNo] = useState(1);\n  const lastScreenNo = 2;\n\n  return (\n    <Modal open={open} className=\"OnboardingModal\" size=\"sm\">\n      <Content\n        top={<Header center={<HeaderTitle>{screenNo === 1 ? \"Get Started\" : \"Controls\"}</HeaderTitle>} />}\n        children={\n          <div className=\"OnboardingModal__content\">\n            {screenNo === 1 && (\n              <div className=\"OnboardingModal__screen1 flex flex-column justify-center items-center gap-sm text-center\">\n                <Avatar\n                  name={world.name || \"Home World\"}\n                  size=\"xl\"\n                  shape=\"circle\"\n                  className=\"shrink-0\"\n                  bgColor={`var(--usercolor${getIdentifierColorNumber(world.id)})`}\n                  imageSrc={\n                    world.avatarUrl ? getAvatarHttpUrl(world.avatarUrl, 50, platform, world.mediaRepository) : undefined\n                  }\n                />\n                <Text variant=\"h2\" weight=\"semi-bold\">\n                  Welcome to your home world\n                </Text>\n                <Text>This is a private world to make your own that will evolve as Third Room grows.</Text>\n                <Text>\n                  We've set up a few portals in your space leading to public worlds for you to explore. You can get back\n                  to this space at any time in the overlay.\n                </Text>\n                <Text>Have fun exploring Third Room!</Text>\n              </div>\n            )}\n            {screenNo === 2 && (\n              <Scroll type=\"hover\">\n                <ShortcutUI />\n              </Scroll>\n            )}\n          </div>\n        }\n        bottom={\n          <Footer\n            left={\n              screenNo > 1 ? (\n                <Button onClick={() => setScreenNo(screenNo - 1)} fill=\"outline\">\n                  Back\n                </Button>\n              ) : (\n                <></>\n              )\n            }\n            center={<PaginationDot max={lastScreenNo} value={screenNo} />}\n            right={\n              <>\n                {lastScreenNo === screenNo && <Button onClick={requestClose}>Finish</Button>}\n                {screenNo < lastScreenNo && <Button onClick={() => setScreenNo(screenNo + 1)}>Next</Button>}\n              </>\n            }\n          />\n        }\n      />\n    </Modal>\n  );\n}\n","import { Room } from \"@thirdroom/hydrogen-view-sdk\";\nimport { useAtomValue } from \"jotai\";\nimport { useCallback, useEffect } from \"react\";\n\nimport { useMainThreadContext } from \"../../../hooks/useMainThread\";\nimport { useOnboarding } from \"../../../hooks/useOnboarding\";\nimport { worldAtom } from \"../../../state/world\";\nimport { OnboardingModal } from \"./OnboardingModal\";\n\nexport function WorldOnboarding({ world }: { world: Room }) {\n  const mainThread = useMainThreadContext();\n  const isWorldEntered = useAtomValue(worldAtom).entered;\n\n  const { onboarding, finishOnboarding } = useOnboarding(isWorldEntered ? world.id : undefined);\n\n  useEffect(() => {\n    if (onboarding) document.exitPointerLock();\n  }, [onboarding]);\n\n  const onFinishOnboarding = useCallback(() => {\n    finishOnboarding();\n    mainThread.canvas?.requestPointerLock();\n  }, [mainThread.canvas, finishOnboarding]);\n\n  return <OnboardingModal open={onboarding} world={world} requestClose={onFinishOnboarding} />;\n}\n","import { GroupCall, Room, RoomStatus, Session } from \"@thirdroom/hydrogen-view-sdk\";\nimport { useSetAtom } from \"jotai\";\nimport { useCallback, useState } from \"react\";\n\nimport { InteractableType } from \"../../../../engine/resource/schema\";\nimport { InteractableAction } from \"../../../../plugins/interaction/interaction.common\";\nimport { useIsMounted } from \"../../../hooks/useIsMounted\";\nimport { useMainThreadContext } from \"../../../hooks/useMainThread\";\nimport { useMemoizedState } from \"../../../hooks/useMemoizedState\";\nimport { overlayWorldAtom } from \"../../../state/overlayWorld\";\nimport { aliasToRoomId, getMxIdUsername, parseMatrixUri } from \"../../../utils/matrixUtils\";\nimport { InteractionState, useWorldInteraction } from \"../../../hooks/useWorldInteraction\";\nimport { Dialog } from \"../../../atoms/dialog/Dialog\";\nimport { EntityTooltip } from \"../entity-tooltip/EntityTooltip\";\nimport { MemberListDialog } from \"../dialogs/MemberListDialog\";\nimport { getModule } from \"../../../../engine/module/module.common\";\nimport { PlayerModule } from \"../../../../engine/player/Player.main\";\nimport { Reticle } from \"../reticle/Reticle\";\nimport { useWorldNavigator } from \"../../../hooks/useWorldNavigator\";\nimport { useWorldLoader } from \"../../../hooks/useWorldLoader\";\n\nexport interface IPortalProcess {\n  joining?: boolean;\n  error?: Error;\n}\n\ninterface WorldInteractionProps {\n  session: Session;\n  world: Room;\n  activeCall?: GroupCall;\n}\n\nexport function WorldInteraction({ session, world, activeCall }: WorldInteractionProps) {\n  const mainThread = useMainThreadContext();\n  const camRigModule = getModule(mainThread, PlayerModule);\n\n  const [activeEntity, setActiveEntity] = useMemoizedState<InteractionState | undefined>();\n  const [portalProcess, setPortalProcess] = useMemoizedState<IPortalProcess>({});\n  const [members, setMembers] = useState(false);\n\n  const { navigateEnterWorld } = useWorldNavigator(session);\n  const { exitWorld } = useWorldLoader();\n  const selectWorld = useSetAtom(overlayWorldAtom);\n  const isMounted = useIsMounted();\n\n  const handlePortalGrab = useCallback(\n    async (interaction) => {\n      let unSubStatusObserver: () => void | undefined;\n\n      try {\n        setPortalProcess({});\n        const { uri } = interaction;\n        if (!uri) throw Error(\"Portal does not have valid matrix id/alias\");\n\n        const parsedUri = parseMatrixUri(uri);\n        if (parsedUri instanceof URL) {\n          window.location.href = parsedUri.href;\n          return;\n        }\n\n        const roomIdOrAlias = parsedUri.mxid1;\n        const roomId = roomIdOrAlias.startsWith(\"#\") ? aliasToRoomId(session.rooms, parsedUri.mxid1) : parsedUri.mxid1;\n\n        if (!roomId) {\n          setPortalProcess({ joining: true });\n          const rId = await session.joinRoom(roomIdOrAlias);\n          if (!isMounted()) return;\n\n          setPortalProcess({});\n          const roomStatusObserver = await session.observeRoomStatus(rId);\n          unSubStatusObserver = roomStatusObserver.subscribe(async (roomStatus) => {\n            const newWorld = session.rooms.get(rId);\n            if (!newWorld || roomStatus !== RoomStatus.Joined) return;\n\n            const stateEvent = await newWorld.getStateEvent(\"org.matrix.msc3815.world\");\n            const content = stateEvent?.event.content;\n            if (!content) return;\n\n            selectWorld(roomId);\n\n            exitWorld();\n            navigateEnterWorld(newWorld);\n          });\n\n          return;\n        }\n\n        const newWorld = session.rooms.get(roomId);\n        if (newWorld) {\n          const stateEvent = await newWorld.getStateEvent(\"org.matrix.msc3815.world\");\n          const content = stateEvent?.event.content;\n          if (!content) return;\n\n          selectWorld(roomId);\n\n          exitWorld();\n          navigateEnterWorld(newWorld);\n          return;\n        }\n      } catch (err) {\n        if (!isMounted()) return;\n        setPortalProcess({ error: err as Error });\n      }\n      return () => {\n        unSubStatusObserver?.();\n      };\n    },\n    [session, selectWorld, exitWorld, navigateEnterWorld, isMounted, setPortalProcess]\n  );\n\n  const handleInteraction = useCallback(\n    (interaction?: InteractionState) => {\n      if (!interaction) return setActiveEntity(undefined);\n      const { interactableType, action, peerId } = interaction;\n\n      if (action === InteractableAction.Grab) {\n        if (interactableType === InteractableType.Player && typeof peerId === \"string\") {\n          setMembers(true);\n          document.exitPointerLock();\n          return;\n        }\n        if (interactableType === InteractableType.Portal) {\n          handlePortalGrab(interaction);\n          return;\n        }\n      }\n\n      if (interactableType === InteractableType.Player) {\n        const entity: InteractionState = {\n          ...interaction,\n          name: peerId ? activeCall?.members.get(peerId)?.member.displayName || getMxIdUsername(peerId) : \"Player\",\n        };\n        setActiveEntity(entity);\n      }\n\n      setActiveEntity(interaction);\n    },\n    [handlePortalGrab, setActiveEntity, activeCall]\n  );\n\n  useWorldInteraction(mainThread, handleInteraction);\n\n  return (\n    <div>\n      {!(\"isBeingCreated\" in world) && (\n        <Dialog open={members} onOpenChange={setMembers}>\n          <MemberListDialog room={world} requestClose={() => setMembers(false)} />\n        </Dialog>\n      )}\n      {!camRigModule.orbiting && <Reticle />}\n      {activeEntity && !camRigModule.orbiting && (\n        <EntityTooltip activeEntity={activeEntity} portalProcess={portalProcess} />\n      )}\n    </div>\n  );\n}\n","import { useEffect, useState } from \"react\";\nimport { Room } from \"@thirdroom/hydrogen-view-sdk\";\nimport classNames from \"classnames\";\nimport { useAtom, useAtomValue } from \"jotai\";\nimport { useKBar, VisualState } from \"kbar\";\n\nimport { WorldChat } from \"../world-chat/WorldChat\";\nimport { Stats } from \"../stats/Stats\";\nimport { Text } from \"../../../atoms/text/Text\";\nimport { useKeyDown } from \"../../../hooks/useKeyDown\";\nimport { useEvent } from \"../../../hooks/useEvent\";\nimport \"./WorldView.css\";\nimport { EditorView } from \"../editor/EditorView\";\nimport { Nametags } from \"../nametags/Nametags\";\nimport { useMainThreadContext } from \"../../../hooks/useMainThread\";\nimport { getModule, registerMessageHandler } from \"../../../../engine/module/module.common\";\nimport { useToast } from \"../../../hooks/useToast\";\nimport { useHydrogen } from \"../../../hooks/useHydrogen\";\nimport { MainContext } from \"../../../../engine/MainThread\";\nimport { createDisposables } from \"../../../../engine/utils/createDisposables\";\nimport { useCalls } from \"../../../hooks/useCalls\";\nimport { useRoomCall } from \"../../../hooks/useRoomCall\";\nimport { useWebXRSession } from \"../../../hooks/useWebXRSession\";\nimport { worldChatVisibilityAtom } from \"../../../state/worldChatVisibility\";\nimport { overlayVisibilityAtom } from \"../../../state/overlayVisibility\";\nimport { worldAtom } from \"../../../state/world\";\nimport { PlayerModule } from \"../../../../engine/player/Player.main\";\nimport { HotbarControls, WorldControls } from \"./WorldControls\";\nimport { WorldOnboarding } from \"./WorldOnboarding\";\nimport { useLocalStorage } from \"../../../hooks/useLocalStorage\";\nimport { WorldInteraction } from \"./WorldInteraction\";\nimport {\n  EnterWebXRAction,\n  MembersDialogAction,\n  MuteButtonAction,\n  ShortcutDialogAction,\n  useToggleEditorAction,\n  useTogglePhysicsDebugAction,\n  useToggleNamesAction,\n  useToggleStatsAction,\n} from \"../cmd-panel/actions\";\nimport { inputFocused } from \"../../../utils/common\";\nimport { useDisableInput } from \"../../../hooks/useDisableInput\";\nimport { editorEnabledAtom } from \"../../../state/editor\";\nimport { usePowerLevels } from \"../../../hooks/usePowerLevels\";\nimport { ObjectCapReachedMessage, ThirdRoomMessageType } from \"../../../../plugins/thirdroom/thirdroom.common\";\n\nconst SHOW_NAMES_STORE = \"showNames\";\ninterface WorldViewProps {\n  world: Room;\n}\n\nexport function WorldView({ world }: WorldViewProps) {\n  const mainThread = useMainThreadContext();\n  const { session } = useHydrogen(true);\n  const { getPowerLevel, canSendStateEvent } = usePowerLevels(world);\n  const canEditScene = canSendStateEvent(\"org.matrix.msc3815.world\", getPowerLevel(session.userId));\n  const calls = useCalls(session);\n  const activeCall = useRoomCall(calls, world.id);\n  const isWorldEntered = useAtomValue(worldAtom).entered;\n  const [worldChatVisible, setWorldChatVisibility] = useAtom(worldChatVisibilityAtom);\n  const [overlayVisible, setOverlayVisibility] = useAtom(overlayVisibilityAtom);\n  const [editorEnabled, setEditorEnabled] = useAtom(editorEnabledAtom);\n  const [statsEnabled, setStatsEnabled] = useState(false);\n\n  const { toastShown, toastContent, showToast } = useToast();\n\n  const camRigModule = getModule(mainThread, PlayerModule);\n  const [showNames, setShowNames] = useLocalStorage(SHOW_NAMES_STORE, true);\n  const { isWebXRSupported, enterXR, isPresenting } = useWebXRSession();\n\n  const { kbarVisible } = useKBar((state) => ({ kbarVisible: state.visualState !== VisualState.hidden }));\n  useDisableInput(kbarVisible);\n\n  useToggleNamesAction(showNames, setShowNames, showToast);\n  useToggleEditorAction(setEditorEnabled, canEditScene, showToast);\n  useTogglePhysicsDebugAction();\n  useToggleStatsAction(setStatsEnabled);\n\n  useEffect(() => {\n    const onObjectCapReached = (ctx: MainContext, message: ObjectCapReachedMessage) => {\n      showToast(\"Maximum number of objects reached.\");\n    };\n\n    const disposables = createDisposables([\n      registerMessageHandler(mainThread, ThirdRoomMessageType.ObjectCapReached, onObjectCapReached),\n    ]);\n    return () => {\n      disposables();\n    };\n  }, [mainThread, showToast]);\n\n  useKeyDown(\n    (e) => {\n      if (e.key === \"Escape\" && camRigModule.orbiting) {\n        return;\n      }\n\n      if (e.key === \"Escape\") {\n        if (worldChatVisible) {\n          mainThread.canvas?.requestPointerLock();\n          setWorldChatVisibility(false);\n          return;\n        }\n\n        if (inputFocused()) return;\n\n        if (editorEnabled) {\n          mainThread.canvas?.requestPointerLock();\n          setEditorEnabled(false);\n          return;\n        }\n\n        if (overlayVisible) {\n          mainThread.canvas?.requestPointerLock();\n          setOverlayVisibility(false);\n          return;\n        } else {\n          document.exitPointerLock();\n          setOverlayVisibility(true);\n          return;\n        }\n      }\n\n      if (inputFocused()) return;\n\n      if (e.key === \"Enter\" && !overlayVisible && !worldChatVisible) {\n        if (document.activeElement !== document.body) return;\n        document.exitPointerLock();\n        setWorldChatVisibility(true);\n        return;\n      }\n    },\n    [worldChatVisible, overlayVisible, editorEnabled]\n  );\n\n  useEvent(\n    \"click\",\n    (e) => {\n      if (isWorldEntered === false) return;\n\n      if (!camRigModule.orbiting && !editorEnabled) mainThread.canvas?.requestPointerLock();\n\n      if (worldChatVisible) setWorldChatVisibility(false);\n      if (overlayVisible) setOverlayVisibility(false);\n    },\n    mainThread.canvas,\n    [isWorldEntered, worldChatVisible, setWorldChatVisibility, overlayVisible, setOverlayVisibility, editorEnabled]\n  );\n\n  useEffect(() => {\n    mainThread.canvas.requestPointerLock();\n  }, [mainThread]);\n\n  if (isPresenting) return null;\n\n  return (\n    <div className=\"WorldView\">\n      <MuteButtonAction activeCall={activeCall} showToast={showToast} />\n      <MembersDialogAction world={world} />\n      <ShortcutDialogAction />\n      {isWebXRSupported && <EnterWebXRAction enter={enterXR} />}\n\n      <WorldOnboarding world={world} />\n      <Stats statsEnabled={statsEnabled} />\n      <div className={classNames(\"WorldView__chat flex\", { \"WorldView__chat--open\": worldChatVisible })}>\n        {!(\"isBeingCreated\" in world) && !editorEnabled && <WorldChat open={worldChatVisible} room={world} />}\n      </div>\n      {world && !editorEnabled && (\n        <>\n          {!worldChatVisible && <HotbarControls />}\n          <WorldControls\n            className=\"WorldView__controls\"\n            session={session}\n            world={world}\n            activeCall={activeCall}\n            showToast={showToast}\n            isWebXRSupported={isWebXRSupported}\n            enterXR={enterXR}\n            showNames={showNames}\n            setShowNames={setShowNames}\n          />\n        </>\n      )}\n      {world && editorEnabled && <EditorView room={world} />}\n      {!(\"isBeingCreated\" in world) && <Nametags room={world} show={showNames && !overlayVisible} />}\n\n      {!overlayVisible && !editorEnabled && (\n        <WorldInteraction session={session} world={world} activeCall={activeCall} />\n      )}\n\n      <div className=\"WorldView__toast-container\">\n        <div className={classNames(\"WorldView__toast\", { \"WorldView__toast--shown\": toastShown })}>\n          <Text variant=\"b2\" color=\"world\" weight=\"semi-bold\">\n            {toastContent}\n          </Text>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import { Room, StateEvent, SubscriptionHandle } from \"@thirdroom/hydrogen-view-sdk\";\nimport { useAtomValue, useSetAtom } from \"jotai\";\nimport { useEffect, useState } from \"react\";\n\nimport { useHydrogen } from \"../../../hooks/useHydrogen\";\nimport { useIsMounted } from \"../../../hooks/useIsMounted\";\nimport { useRoom } from \"../../../hooks/useRoom\";\nimport { useWorldPath } from \"../../../hooks/useWorld\";\nimport { useWorldLoader } from \"../../../hooks/useWorldLoader\";\nimport { overlayVisibilityAtom } from \"../../../state/overlayVisibility\";\nimport { overlayWorldAtom } from \"../../../state/overlayWorld\";\nimport { worldAtom } from \"../../../state/world\";\nimport { WorldLoading } from \"./WorldLoading\";\nimport { WorldThumbnail } from \"./WorldThumbnail\";\nimport { WorldView } from \"./WorldView\";\nimport { editorEnabledAtom } from \"../../../state/editor\";\n\nasync function getWorldContent(world: Room) {\n  const stateEvent = await world.getStateEvent(\"org.matrix.msc3815.world\");\n  return stateEvent?.event.content;\n}\n\nexport default function WorldRootView() {\n  const { entered, loading } = useAtomValue(worldAtom);\n  const setWorld = useSetAtom(worldAtom);\n  const { session } = useHydrogen(true);\n  const isMounted = useIsMounted();\n  const [error, setError] = useState<Error>();\n  const setOverlayVisibility = useSetAtom(overlayVisibilityAtom);\n  const { loadAndEnterWorld, reloadWorld, exitWorld } = useWorldLoader();\n  const selectWorld = useSetAtom(overlayWorldAtom);\n  const [roomId, reloadId] = useWorldPath();\n  const navigatedWorld = useRoom(session, roomId);\n  const setEditorEnabled = useSetAtom(editorEnabledAtom);\n\n  /**\n   * Handle loading are reloading\n   */\n  useEffect(() => {\n    exitWorld();\n    if (navigatedWorld) {\n      (async () => {\n        try {\n          const content = await getWorldContent(navigatedWorld);\n          await loadAndEnterWorld(navigatedWorld, content ?? {});\n        } catch (err) {\n          setError(err as Error);\n          console.error(err);\n        }\n      })();\n    }\n  }, [navigatedWorld, reloadId, selectWorld, loadAndEnterWorld, exitWorld, setWorld]);\n\n  /**\n   * Selects the world we are entered into for display in the overlay\n   */\n  useEffect(() => {\n    if (navigatedWorld) {\n      selectWorld(navigatedWorld.id);\n    }\n  }, [navigatedWorld, selectWorld]);\n\n  /**\n   * Hides the overlay while loading into a world\n   */\n  useEffect(() => {\n    setOverlayVisibility(!loading && !entered);\n  }, [setOverlayVisibility, entered, loading]);\n\n  /**\n   * Reloading via scene state update\n   */\n  useEffect(() => {\n    setError(undefined);\n\n    let dispose: SubscriptionHandle;\n    if (navigatedWorld && entered) {\n      const handleLoad = async (event: StateEvent | undefined) => {\n        const content = event?.content;\n        if (!content) return;\n\n        setEditorEnabled(false);\n\n        try {\n          await reloadWorld(navigatedWorld, content);\n        } catch (err) {\n          setError(err as Error);\n          console.error(err);\n        }\n      };\n      navigatedWorld.observeStateTypeAndKey(\"org.matrix.msc3815.world\", \"\").then(async (observable) => {\n        dispose = observable.subscribe(handleLoad);\n      });\n    }\n\n    return () => {\n      dispose?.();\n    };\n  }, [navigatedWorld, entered, isMounted, reloadWorld, setEditorEnabled]);\n\n  return (\n    <>\n      {navigatedWorld && entered && <WorldView world={navigatedWorld} />}\n      <WorldThumbnail />\n      {navigatedWorld && <WorldLoading world={navigatedWorld} loading={loading} error={error} />}\n    </>\n  );\n}\n"],"names":["FetchProgressMessageType","useWorldLoadingProgress","engine","useMainThreadContext","loadProgress","setLoadProgress","useState","useEffect","registerMessageHandler","ctx","message","useCallback","WorldLoading","world","loading","error","overlayVisible","useAtom","overlayVisibilityAtom","resetLoadProgress","creator","setCreator","session","useHydrogen","navigateEnterWorld","navigateExitWorld","useWorldNavigator","disposed","stateEvent","creatorId","jsxs","Fragment","jsx","WorldPreviewCard","Button","Progress","getPercentage","Text","bytesToSize","TextMessageView","TemplateView","vm","t","isEmote","_a","body","_b","classNames","linkifyText","AnnouncementView","WorldChatGap","ChatDate","viewClassForTile","WorldChatTimeline","timelineViewModel","timelineViewContainerRef","useRef","useEmbedTimeline","WorldChatComposer","composerViewModel","ev","target","usePreviousState","value","valueRef","useRecentMessages","room","maxCount","eventsRef","forceUpdate","useReducer","state","eventEntry","useRecentMessage","prevEventEntry","WorldChat","open","roomViewModel","useRoomViewModel","worldChatTileClassForEntry","events","Icon","MessageIC","useToast","toastShown","toastContent","setToastState","isMounted","useIsMounted","toastTimeoutRef","showToast","DefaultXRInit","useWebXRSession","immersiveAR","useLocalStorage","isPresenting","setIsPresenting","enterXR","enteringXR","webXRSessionError","useAsyncCallback","mode","Thread","RendererMessageType","onSessionEnd","HotbarSlot","imageSrc","label","shortcutKey","Tooltip","ThumbnailImg","Hotbar","children","SubtitlesIC","SubtitlesOffIC","HelpIC","XRIC","useActionBar","mainThread","actionBarItems","setActionBarItems","getModule","ThirdroomModule","ThirdRoomMessageType","HotbarControls","item","index","MuteButton","forwardRef","activeCall","ref","mute","requestStream","handleMute","micException","setMicException","useMuteButton","MicExceptionDialog","IconButton","MicOffIC","MicIC","manageMuteRequest","WorldControls","className","isWebXRSupported","showNames","setShowNames","showActiveMembers","setShowActiveMembers","shortcutUI","setShortcutUI","toggleShowActiveMembers","toggleShortcutUI","toggleShowNames","enabled","NametagsEnableMessage","useKeyDown","e","inputFocused","useDisableInput","Dialog","Header","HeaderTitle","CrossIC","Scroll","ShortcutUI","PeopleIC","MemberListDialog","CallCrossIC","ONBOARDING_KEY","useOnboarding","worldId","platform","onboarding","setOnboarding","run","homeAccountData","onboardingData","onboardingVersion","lastOnboardingVersion","PaginationDot","max","OnboardingModal","requestClose","screenNo","setScreenNo","lastScreenNo","Modal","Content","Avatar","getIdentifierColorNumber","getAvatarHttpUrl","Footer","WorldOnboarding","isWorldEntered","useAtomValue","worldAtom","finishOnboarding","onFinishOnboarding","WorldInteraction","camRigModule","PlayerModule","activeEntity","setActiveEntity","useMemoizedState","portalProcess","setPortalProcess","members","setMembers","exitWorld","useWorldLoader","selectWorld","useSetAtom","overlayWorldAtom","handlePortalGrab","interaction","unSubStatusObserver","uri","parsedUri","parseMatrixUri","roomIdOrAlias","roomId","aliasToRoomId","rId","roomStatus","newWorld","RoomStatus","err","handleInteraction","interactableType","action","peerId","InteractableAction","InteractableType","entity","getMxIdUsername","useWorldInteraction","Reticle","EntityTooltip","SHOW_NAMES_STORE","WorldView","getPowerLevel","canSendStateEvent","usePowerLevels","canEditScene","calls","useCalls","useRoomCall","worldChatVisible","setWorldChatVisibility","worldChatVisibilityAtom","setOverlayVisibility","editorEnabled","setEditorEnabled","editorEnabledAtom","statsEnabled","setStatsEnabled","kbarVisible","useKBar","VisualState","useToggleNamesAction","useToggleEditorAction","useTogglePhysicsDebugAction","useToggleStatsAction","onObjectCapReached","disposables","createDisposables","_c","useEvent","MuteButtonAction","MembersDialogAction","ShortcutDialogAction","EnterWebXRAction","Stats","EditorView","Nametags","getWorldContent","WorldRootView","entered","setWorld","setError","loadAndEnterWorld","reloadWorld","reloadId","useWorldPath","navigatedWorld","useRoom","content","dispose","handleLoad","event","observable","WorldThumbnail"],"mappings":"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"}