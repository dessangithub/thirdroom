{"version":3,"file":"ComboInput.stories-85c58b2b.js","sources":["../../../src/ui/views/components/property-panel/ComboInput.tsx"],"sourcesContent":["import { useCombobox } from \"downshift\";\nimport { useState } from \"react\";\n\nimport { IconButton } from \"../../../atoms/button/IconButton\";\nimport { Input } from \"../../../atoms/input/Input\";\nimport { MenuItem } from \"../../../atoms/menu/MenuItem\";\nimport { Scroll } from \"../../../atoms/scroll/Scroll\";\nimport ChevronBottomIC from \"./../../../../../res/ic/chevron-bottom.svg\";\nimport ChevronTopIC from \"./../../../../../res/ic/chevron-top.svg\";\nimport \"./ComboInput.css\";\n\ninterface Option<T> {\n  value: T;\n  label: string;\n}\ninterface ComboInputProps<T> {\n  options: Option<T>[];\n  disabled?: boolean;\n  selected: Option<T>;\n  onSelectedChange: (value: Option<T>) => void;\n}\nexport function ComboInput<T>({ options, disabled, selected, onSelectedChange }: ComboInputProps<T>) {\n  const [inputOptions, setInputOptions] = useState(options);\n\n  const { isOpen, highlightedIndex, getToggleButtonProps, getMenuProps, getInputProps, getItemProps } = useCombobox({\n    selectedItem: selected,\n    items: inputOptions,\n    itemToString: (item) => item?.label ?? \"\",\n    onInputValueChange: ({ inputValue }) => {\n      if (!inputValue) return setInputOptions(options);\n      setInputOptions(options.filter((option) => option.label.toLowerCase().startsWith(inputValue.toLowerCase())));\n    },\n    onSelectedItemChange: (change) => {\n      if (change.selectedItem) onSelectedChange(change.selectedItem);\n    },\n  });\n\n  return (\n    <div className=\"ComboInput\">\n      <Input\n        disabled={disabled}\n        inputSize=\"sm\"\n        outlined\n        after={\n          <IconButton\n            disabled={disabled}\n            size=\"sm\"\n            iconSrc={isOpen ? ChevronTopIC : ChevronBottomIC}\n            {...getToggleButtonProps()}\n          />\n        }\n        {...getInputProps()}\n      />\n      <div className=\"ComboInput__menu\" {...getMenuProps()}>\n        {isOpen && (\n          <Scroll className=\"ComboInput__menu-scroll\">\n            {inputOptions.map((option, index) => (\n              <MenuItem\n                variant={index === highlightedIndex ? \"primary\" : \"surface\"}\n                key={option.label + index}\n                {...getItemProps({ index, item: option })}\n              >\n                {option.label}\n              </MenuItem>\n            ))}\n          </Scroll>\n        )}\n      </div>\n    </div>\n  );\n}\n"],"names":["ComboInput","options","disabled","selected","onSelectedChange","inputOptions","setInputOptions","useState","isOpen","highlightedIndex","getToggleButtonProps","getMenuProps","getInputProps","getItemProps","useCombobox","item","inputValue","option","change","jsxs","jsx","Input","IconButton","ChevronTopIC","ChevronBottomIC","Scroll","index","MenuItem"],"mappings":"qqBAqBO,SAAAA,EAAA,CAAA,QAAAC,EAAA,SAAAC,EAAA,SAAAC,EAAA,iBAAAC,CAAA,EAAA,CACL,KAAA,CAAAC,EAAAC,CAAA,EAAAC,EAAA,SAAAN,CAAA,EAEA,CAAA,OAAAO,EAAA,iBAAAC,EAAA,qBAAAC,EAAA,aAAAC,EAAA,cAAAC,EAAA,aAAAC,CAAA,EAAAC,EAAA,CAAkH,aAAAX,EAClG,MAAAE,EACP,aAAAU,IAAAA,GAAA,YAAAA,EAAA,QAAA,GACgC,mBAAA,CAAA,CAAA,WAAAC,KAAA,CAErC,GAAA,CAAAA,EAAiB,OAAAV,EAAAL,CAAA,EACjBK,EAAAL,EAAA,OAAAgB,GAAAA,EAAA,MAAA,YAAA,EAAA,WAAAD,EAAA,YAAA,CAAA,CAAA,CAAA,CAA2G,EAC7G,qBAAAE,GAAA,CAEEA,EAAA,cAAyBd,EAAAc,EAAA,YAAA,CAAoC,CAC/D,CAAA,EAGF,OAAAC,EAAA,MAAA,CAAA,UAAA,aAAA,SAAA,CAEIC,EAAAC,EAAC,CAAA,SAAAnB,EACC,UAAA,KACU,SAAA,GACF,MAAAkB,EAENE,EAAC,CAAA,SAAApB,EACC,KAAA,KACK,QAAAM,EAAAe,EAAAC,EAC4B,GAAAd,EAAA,CACR,CAAA,EAC3B,GAAAE,EAAA,CAEgB,CAAA,EACpBQ,EAAA,MAAA,CAAA,UAAA,mBAAA,GAAAT,EAAA,EAAA,SAAAH,GAAAY,EAAAK,EAAA,CAAA,UAAA,0BAAA,SAAApB,EAAA,IAAA,CAAAY,EAAAS,IAAAN,EAKQO,EAAC,CAAA,QAAAD,IAAAjB,EAAA,UAAA,UACmD,GAAAI,EAAA,CAAA,MAAAa,EAAA,KAAAT,CAAA,CAAA,EAEV,SAAAA,EAAA,KAEhC,EAAAA,EAAA,MAAAS,CAHY,CAAA,CAAA,CAAA,CAAA,CAAA,CAQ9B,CAAA,CAAA,CAGN;;;;;;;;;;"}