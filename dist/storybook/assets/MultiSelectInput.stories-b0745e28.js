import{j as f,a as n}from"./jsx-runtime-06a742f9.js";import{r as d}from"./index-f2bd0723.js";import{a as c,u as l,C as K,M as q}from"./ComboInput-83e18573.js";import{I as y}from"./IconButton-5b313af7.js";import{I as P}from"./Input-5f757d12.js";import{T as z}from"./Text-9cbc10ca.js";import{C as E}from"./Chip-079fc830.js";import{C as j}from"./chevron-bottom-5b966e07.js";import{C as R}from"./cross-da909995.js";import{S as W}from"./Scroll-5a2f8583.js";import"./_commonjsHelpers-042e6b4d.js";import"./extends-98964cd2.js";import"./index-1fc0ca9a.js";import"./index-f9f0573c.js";/* empty css                 */import"./Icon-341303e8.js";import"./index.module-b8f4923b.js";import"./index.module-00d29c03.js";import"./index.module-a2f32e93.js";import"./index.module-3f7deb99.js";function F(a,r,h){return a.filter(i=>!r.find(p=>p.value===i.value)&&i.label.toLowerCase().startsWith(h.toLowerCase()))}function m({options:a,disabled:r,selected:h,onSelectedChange:i,onSelectedOptionClick:p}){const[I,w]=d.useState(""),[s,C]=d.useState(h),S=d.useMemo(()=>F(a,s,I),[a,s,I]),{getDropdownProps:O,removeSelectedItem:_}=c({selectedItems:s,onStateChange({selectedItems:e,type:t}){switch(t){case c.stateChangeTypes.SelectedItemKeyDownBackspace:case c.stateChangeTypes.SelectedItemKeyDownDelete:case c.stateChangeTypes.DropdownKeyDownBackspace:case c.stateChangeTypes.FunctionRemoveSelectedItem:C(e??[]),i(e??[]);break}}}),{isOpen:g,getToggleButtonProps:M,getMenuProps:k,getInputProps:D,highlightedIndex:N,getItemProps:V}=l({items:S,itemToString:e=>(e==null?void 0:e.label)??"",defaultHighlightedIndex:0,selectedItem:null,stateReducer(e,t){const{changes:o,type:B}=t;switch(B){case l.stateChangeTypes.InputKeyDownEnter:case l.stateChangeTypes.ItemClick:case l.stateChangeTypes.InputBlur:return{...o,...o.selectedItem&&{isOpen:!0,highlightedIndex:0}};default:return o}},onStateChange({inputValue:e,type:t,selectedItem:o}){switch(t){case l.stateChangeTypes.InputKeyDownEnter:case l.stateChangeTypes.ItemClick:o&&(C([...s,o]),i([...s,o]));break;case l.stateChangeTypes.InputChange:w(e??"");break}}});return f("div",{className:"ComboInput",children:[n(P,{className:"flex-wrap",before:s.length>0&&n("div",{className:"flex gap-xs flex-wrap",style:{width:"100%",marginTop:"var(--sp-xs)"},children:s.map((e,t)=>f(E,{size:"sm",children:[n("button",{onClick:p?()=>p(e):void 0,style:{cursor:"pointer"},children:n(z,{className:"truncate",variant:"b3",weight:"medium",children:e.label})}),n(y,{onClick:()=>_(e),size:"sm",iconSrc:R,label:"Remove"})]},e.label+t))}),disabled:r,inputSize:"sm",outlined:!0,after:n(y,{disabled:r,size:"sm",iconSrc:g?K:j,...M()}),...D(O({preventKeyAction:g}))}),n("div",{className:"ComboInput__menu",...k(),children:g&&n(W,{className:"ComboInput__menu-scroll",children:S.map((e,t)=>n(q,{variant:t===N?"primary":"surface",...V({index:t,item:e}),children:e.label},e.label+t))})})]})}try{m.displayName="MultiSelectInput",m.__docgenInfo={description:"",displayName:"MultiSelectInput",props:{options:{defaultValue:null,description:"",name:"options",required:!0,type:{name:"Option<T>[]"}},disabled:{defaultValue:null,description:"",name:"disabled",required:!1,type:{name:"boolean"}},selected:{defaultValue:null,description:"",name:"selected",required:!0,type:{name:"Option<T>[]"}},onSelectedChange:{defaultValue:null,description:"",name:"onSelectedChange",required:!0,type:{name:"(value: Option<T>[]) => void"}},onSelectedOptionClick:{defaultValue:null,description:"",name:"onSelectedOptionClick",required:!1,type:{name:"((value: Option<T>) => void)"}}}}}catch{}const ce={title:"MultiSelectInput",component:m},b=[{value:1,label:"Option 1"},{value:2,label:"Option 2"},{value:3,label:"Option 3"},{value:4,label:"Option 4"},{value:5,label:"Option 5"},{value:6,label:"Option 6"}];function u(){const[a,r]=d.useState([b[0]]);return console.log(a),n("div",{style:{backgroundColor:"white",padding:"8px",maxWidth:"380px"},children:n(m,{options:b,selected:a,onSelectedChange:r})})}var v,T,x;u.parameters={...u.parameters,docs:{...(v=u.parameters)==null?void 0:v.docs,source:{originalSource:`function MultiSelectInputStories() {
  const [selected, setSelected] = useState([options[0]]);
  console.log(selected);
  return <div style={{
    backgroundColor: "white",
    padding: "8px",
    maxWidth: "380px"
  }}>\r
      <MultiSelectInput options={options} selected={selected} onSelectedChange={setSelected} />\r
    </div>;
}`,...(x=(T=u.parameters)==null?void 0:T.docs)==null?void 0:x.source}}};const pe=["MultiSelectInputStories"];export{u as MultiSelectInputStories,pe as __namedExportsOrder,ce as default};
//# sourceMappingURL=MultiSelectInput.stories-b0745e28.js.map
