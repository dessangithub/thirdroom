{"version":3,"file":"MultiSelectInput.stories-b0745e28.js","sources":["../../../src/ui/views/components/property-panel/MultiSelectInput.tsx"],"sourcesContent":["import { useCombobox, useMultipleSelection } from \"downshift\";\nimport { useMemo, useState } from \"react\";\n\nimport { IconButton } from \"../../../atoms/button/IconButton\";\nimport { Input } from \"../../../atoms/input/Input\";\nimport { MenuItem } from \"../../../atoms/menu/MenuItem\";\nimport { Text } from \"../../../atoms/text/Text\";\nimport { Chip } from \"../../../atoms/chip/Chip\";\nimport ChevronBottomIC from \"./../../../../../res/ic/chevron-bottom.svg\";\nimport ChevronTopIC from \"./../../../../../res/ic/chevron-top.svg\";\nimport CrossIC from \"./../../../../../res/ic/cross.svg\";\nimport \"./ComboInput.css\";\nimport { Scroll } from \"../../../atoms/scroll/Scroll\";\n\ninterface Option<T> {\n  value: T;\n  label: string;\n}\n\ninterface MultiSelectInputProps<T> {\n  options: Option<T>[];\n  disabled?: boolean;\n  selected: Option<T>[];\n  onSelectedChange: (value: Option<T>[]) => void;\n  onSelectedOptionClick?: (value: Option<T>) => void;\n}\n\nfunction getFilteredOptions<T>(options: Option<T>[], selectedOptions: Option<T>[], inputValue: string) {\n  return options.filter(\n    (option) =>\n      !selectedOptions.find((sOption) => sOption.value === option.value) &&\n      option.label.toLowerCase().startsWith(inputValue.toLowerCase())\n  );\n}\n\nexport function MultiSelectInput<T>({\n  options,\n  disabled,\n  selected,\n  onSelectedChange,\n  onSelectedOptionClick,\n}: MultiSelectInputProps<T>) {\n  const [inputValue, setInputValue] = useState(\"\");\n  const [selectedOptions, setSelectedOptions] = useState(selected);\n  const inputOptions = useMemo(\n    () => getFilteredOptions(options, selectedOptions, inputValue),\n    [options, selectedOptions, inputValue]\n  );\n\n  const { getDropdownProps, removeSelectedItem } = useMultipleSelection({\n    selectedItems: selectedOptions,\n    onStateChange({ selectedItems: newSelectedItems, type }) {\n      switch (type) {\n        case useMultipleSelection.stateChangeTypes.SelectedItemKeyDownBackspace:\n        case useMultipleSelection.stateChangeTypes.SelectedItemKeyDownDelete:\n        case useMultipleSelection.stateChangeTypes.DropdownKeyDownBackspace:\n        case useMultipleSelection.stateChangeTypes.FunctionRemoveSelectedItem:\n          setSelectedOptions(newSelectedItems ?? []);\n          onSelectedChange(newSelectedItems ?? []);\n          break;\n        default:\n          break;\n      }\n    },\n  });\n\n  const { isOpen, getToggleButtonProps, getMenuProps, getInputProps, highlightedIndex, getItemProps } = useCombobox({\n    items: inputOptions,\n    itemToString: (item) => {\n      return item?.label ?? \"\";\n    },\n    defaultHighlightedIndex: 0,\n    selectedItem: null,\n    stateReducer(state, actionAndChanges) {\n      const { changes, type } = actionAndChanges;\n\n      switch (type) {\n        case useCombobox.stateChangeTypes.InputKeyDownEnter:\n        case useCombobox.stateChangeTypes.ItemClick:\n        case useCombobox.stateChangeTypes.InputBlur:\n          return {\n            ...changes,\n            ...(changes.selectedItem && { isOpen: true, highlightedIndex: 0 }),\n          };\n        default:\n          return changes;\n      }\n    },\n    onStateChange({ inputValue: newInputValue, type, selectedItem: selectedOption }) {\n      switch (type) {\n        case useCombobox.stateChangeTypes.InputKeyDownEnter:\n        case useCombobox.stateChangeTypes.ItemClick:\n          if (selectedOption) {\n            setSelectedOptions([...selectedOptions, selectedOption]);\n            onSelectedChange([...selectedOptions, selectedOption]);\n          }\n          break;\n        case useCombobox.stateChangeTypes.InputChange:\n          setInputValue(newInputValue ?? \"\");\n          break;\n        default:\n          break;\n      }\n    },\n  });\n\n  return (\n    <div className=\"ComboInput\">\n      <Input\n        className=\"flex-wrap\"\n        before={\n          selectedOptions.length > 0 && (\n            <div className=\"flex gap-xs flex-wrap\" style={{ width: \"100%\", marginTop: \"var(--sp-xs)\" }}>\n              {selectedOptions.map((option, index) => (\n                <Chip key={option.label + index} size=\"sm\">\n                  <button\n                    onClick={onSelectedOptionClick ? () => onSelectedOptionClick(option) : undefined}\n                    style={{ cursor: \"pointer\" }}\n                  >\n                    <Text className=\"truncate\" variant=\"b3\" weight=\"medium\">\n                      {option.label}\n                    </Text>\n                  </button>\n                  <IconButton onClick={() => removeSelectedItem(option)} size=\"sm\" iconSrc={CrossIC} label=\"Remove\" />\n                </Chip>\n              ))}\n            </div>\n          )\n        }\n        disabled={disabled}\n        inputSize=\"sm\"\n        outlined\n        after={\n          <IconButton\n            disabled={disabled}\n            size=\"sm\"\n            iconSrc={isOpen ? ChevronTopIC : ChevronBottomIC}\n            {...getToggleButtonProps()}\n          />\n        }\n        {...getInputProps(getDropdownProps({ preventKeyAction: isOpen }))}\n      />\n      <div className=\"ComboInput__menu\" {...getMenuProps()}>\n        {isOpen && (\n          <Scroll className=\"ComboInput__menu-scroll\">\n            {inputOptions.map((option, index) => (\n              <MenuItem\n                variant={index === highlightedIndex ? \"primary\" : \"surface\"}\n                key={option.label + index}\n                {...getItemProps({ index, item: option })}\n              >\n                {option.label}\n              </MenuItem>\n            ))}\n          </Scroll>\n        )}\n      </div>\n    </div>\n  );\n}\n"],"names":["getFilteredOptions","options","selectedOptions","inputValue","option","sOption","MultiSelectInput","disabled","selected","onSelectedChange","onSelectedOptionClick","setInputValue","useState","setSelectedOptions","inputOptions","useMemo","getDropdownProps","removeSelectedItem","useMultipleSelection","newSelectedItems","type","isOpen","getToggleButtonProps","getMenuProps","getInputProps","highlightedIndex","getItemProps","useCombobox","item","state","actionAndChanges","changes","newInputValue","selectedOption","jsxs","jsx","Input","index","Chip","Text","IconButton","CrossIC","ChevronTopIC","ChevronBottomIC","Scroll","MenuItem"],"mappings":"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"}