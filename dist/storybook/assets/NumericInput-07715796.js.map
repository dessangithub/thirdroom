{"version":3,"file":"NumericInput-07715796.js","sources":["../../../src/ui/atoms/input/NumericInput.tsx"],"sourcesContent":["import { ChangeEvent, FocusEventHandler, KeyboardEvent, RefObject, useEffect, useRef, useState } from \"react\";\n\nimport { Input, InputProps } from \"./Input\";\n\ntype InputType = \"u32\" | \"f32\";\ntype StepType = \"sm\" | \"md\" | \"lg\";\ninterface NumericInputProps extends Omit<InputProps, \"type\" | \"onChange\" | \"step\" | \"defaultValue\"> {\n  type?: InputType;\n  smStep?: number;\n  mdStep?: number;\n  lgStep?: number;\n  floatPrecision?: number;\n  displayPrecision?: number;\n  forwardRef?: HTMLInputElement | null;\n  min?: number;\n  max?: number;\n  value: number;\n  onChange: (value: number) => void;\n}\n\nexport function strToFixed(str: string, digits?: number): string {\n  if (typeof digits !== \"number\" || digits < 0) return str;\n  const pointIndex = str.indexOf(\".\");\n  if (pointIndex < 0) return str;\n  if (pointIndex === str.length - 1 || digits === 0) return str.slice(0, pointIndex);\n  return str.slice(0, pointIndex + 1 + digits);\n}\n\nfunction useValue(\n  inputRef: RefObject<HTMLInputElement | null>,\n  type: InputType,\n  floatPrecision?: number,\n  min?: number,\n  max?: number\n) {\n  const getCurrentValue = (): number | undefined => {\n    if (inputRef.current) {\n      const value = inputRef.current.value.replace(/\\s/g, \"\");\n      const currentValue = value.includes(\".\") ? parseFloat(value) : parseInt(value);\n      if (isNaN(currentValue)) return undefined;\n      return currentValue;\n    }\n    return undefined;\n  };\n\n  const constrainValue = (value?: number) => {\n    if (typeof value !== \"number\") return undefined;\n    let v = value;\n    if (type !== \"f32\") {\n      v = Math.round(v);\n    }\n    if (type === \"u32\" && v < 0) {\n      v = 0;\n    }\n    if (type == \"f32\" && typeof floatPrecision === \"number\") {\n      v = parseFloat(v.toFixed(floatPrecision));\n    }\n    if (typeof min === \"number\" && v < min) return min;\n    if (typeof max === \"number\" && v > max) return max;\n    return v;\n  };\n\n  return {\n    getCurrentValue,\n    constrainValue,\n  };\n}\n\nfunction useStep(smStep?: number, mdStep?: number, lgStep?: number) {\n  const getStep = (stepType: StepType, backwards: boolean): number => {\n    let nextStep = mdStep ?? 1;\n    if (stepType === \"sm\" && smStep) nextStep = smStep;\n    if (stepType === \"lg\" && lgStep) nextStep = lgStep;\n    return backwards ? -1 * nextStep : nextStep;\n  };\n\n  const getStepType = (evt: KeyboardEvent<HTMLInputElement>): StepType => {\n    let stepType: StepType = \"md\";\n    if (evt.shiftKey) stepType = \"lg\";\n    else if (evt.ctrlKey) stepType = \"sm\";\n\n    return stepType;\n  };\n\n  return {\n    getStep,\n    getStepType,\n  };\n}\n\nexport function NumericInput({\n  type = \"u32\",\n  smStep,\n  mdStep,\n  lgStep,\n  floatPrecision,\n  displayPrecision,\n  min,\n  max,\n  value,\n  onChange,\n  onKeyDown,\n  onBlur,\n  onFocus,\n  forwardRef,\n  ...props\n}: NumericInputProps) {\n  const [localValue, setLocalValue] = useState<string>(value.toString());\n  const inputRef = useRef<HTMLInputElement | null>(null);\n  const [focus, setFocus] = useState(false);\n  const { getCurrentValue, constrainValue } = useValue(inputRef, type, floatPrecision, min, max);\n  const { getStep, getStepType } = useStep(smStep, mdStep, lgStep);\n\n  useEffect(() => {\n    setLocalValue(value.toString());\n  }, [value]);\n\n  const handleChange = (evt: ChangeEvent<HTMLInputElement>) => {\n    setLocalValue(evt.currentTarget.value);\n  };\n\n  const saveValue = (newValue?: number) => {\n    const constrainedValue = constrainValue(newValue);\n    setLocalValue(constrainedValue?.toString() ?? value.toString());\n    if (typeof constrainedValue === \"number\") {\n      onChange(constrainedValue);\n    }\n  };\n\n  const restoreValue = () => {\n    setLocalValue(value.toString());\n  };\n\n  const handleKeyDown = (evt: KeyboardEvent<HTMLInputElement>) => {\n    onKeyDown?.(evt);\n\n    if (evt.key === \"Escape\") {\n      restoreValue();\n      setTimeout(() => {\n        // Set timeout so handleBlur won't save edited value.\n        inputRef.current?.blur();\n      }, 100);\n      return;\n    }\n    if (evt.key === \"Enter\") {\n      saveValue(getCurrentValue());\n      return;\n    }\n    if (evt.key === \"ArrowUp\" || evt.key === \"ArrowDown\") {\n      const nextStep = getStep(getStepType(evt), evt.key === \"ArrowDown\");\n      saveValue((getCurrentValue() ?? 0) + nextStep);\n      evt.preventDefault();\n      return;\n    }\n  };\n\n  const handleBlur: FocusEventHandler<HTMLInputElement> = (evt) => {\n    onBlur?.(evt);\n    setFocus(false);\n    saveValue(getCurrentValue());\n  };\n\n  const handleFocus: FocusEventHandler<HTMLInputElement> = (evt) => {\n    onFocus?.(evt);\n    setFocus(true);\n  };\n\n  return (\n    <Input\n      ref={(ref) => {\n        forwardRef = ref;\n        inputRef.current = ref;\n      }}\n      type=\"text\"\n      min={min}\n      max={max}\n      value={\n        focus === false && typeof displayPrecision === \"number\" ? strToFixed(localValue, displayPrecision) : localValue\n      }\n      onChange={handleChange}\n      onKeyDown={handleKeyDown}\n      onBlur={handleBlur}\n      onFocus={handleFocus}\n      {...props}\n    />\n  );\n}\n"],"names":["strToFixed","str","digits","pointIndex","useValue","inputRef","type","floatPrecision","min","max","value","currentValue","v","useStep","smStep","mdStep","lgStep","stepType","backwards","nextStep","evt","NumericInput","displayPrecision","onChange","onKeyDown","onBlur","onFocus","forwardRef","props","localValue","setLocalValue","useState","useRef","focus","setFocus","getCurrentValue","constrainValue","getStep","getStepType","useEffect","handleChange","saveValue","newValue","constrainedValue","restoreValue","handleKeyDown","_a","handleBlur","handleFocus","jsx","Input","ref"],"mappings":"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"}