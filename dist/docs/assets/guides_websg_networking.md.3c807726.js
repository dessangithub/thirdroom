import{_ as s,o as a,c as n,O as e}from"./chunks/framework.c0965656.js";const F=JSON.parse('{"title":"Networking","description":"","frontmatter":{},"headers":[],"relativePath":"guides/websg/networking.md","filePath":"guides/websg/networking.md"}'),o={name:"guides/websg/networking.md"},l=e(`<h1 id="networking" tabindex="-1">Networking <a class="header-anchor" href="#networking" aria-label="Permalink to &quot;Networking&quot;">​</a></h1><p>The WebSG Networking API gives you access to low latency messaging between peers in a world. Third Room&#39;s networking is built on top of WebRTC data channels. It is peer-to-peer, so messages are sent directly between peers without going through a server.</p><p>A host is a peer connected to the world which can be given additional responsibilities for controlling certain objects in the world. The host may change over time, for example if the current host leaves the world or if the host is disconnected from the network.</p><h2 id="broadcasting-messages" tabindex="-1">Broadcasting messages <a class="header-anchor" href="#broadcasting-messages" aria-label="Permalink to &quot;Broadcasting messages&quot;">​</a></h2><p>The <code>network.broadcast</code> function sends a message to all peers in the world. The message can be a string, a binary buffer. The message can be sent reliably or unreliably. Reliable messages are guaranteed to be delivered in order, but may be delayed if the network is congested. Unreliable messages may be dropped or delivered out of order, but can be a useful tool for sending things like positions where you want the lowest latency and don&#39;t care as much about receiving every message.</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// Send a string message to all peers in the world</span></span>
<span class="line"><span style="color:#A6ACCD;">network</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">broadcast</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Hello World</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// Send a binary message to all peers in the world</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> buffer </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ArrayBuffer</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">4</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> view </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Float32Array</span><span style="color:#A6ACCD;">(buffer)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">view[</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">] </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1.0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">network</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">broadcast</span><span style="color:#A6ACCD;">(buffer)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// Send a unreliable message to all peers in the world</span></span>
<span class="line"><span style="color:#A6ACCD;">network</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">broadcast</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Hello World?</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h2 id="tracking-peers" tabindex="-1">Tracking Peers <a class="header-anchor" href="#tracking-peers" aria-label="Permalink to &quot;Tracking Peers&quot;">​</a></h2><p>To send a message to a specific peer or get properties such as their position and rotation you&#39;ll need to keep track of their peer object. The <code>network.local</code> property is the local peer which will be set before <code>world.onenter</code> is called. The <code>network.host</code> property is the current host peer which may change over time.</p><p><code>network.onpeerentered</code> and <code>network.onpeerexited</code> are called any time a peer enters or exits the world and you can use to store your own map of peers.</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">network</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">local</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// The local peer</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">network</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">host</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// The current host peer</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">network</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">onpeerentered</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">peer</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// Called any time a peer enters the world</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">network</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">onpeerexited</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">peer</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// Called any time a peer exits the world</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span></code></pre></div><h2 id="sending-messages-to-a-specific-peer" tabindex="-1">Sending messages to a specific peer <a class="header-anchor" href="#sending-messages-to-a-specific-peer" aria-label="Permalink to &quot;Sending messages to a specific peer&quot;">​</a></h2><p>The <code>peer.send</code> function sends a message to a specific peer. The message can be a string, a binary buffer, just like the <code>network.broadcast</code> method.</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// Send a string message to the peer</span></span>
<span class="line"><span style="color:#A6ACCD;">peer</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">send</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">Hey </span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">peer</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">id</span><span style="color:#89DDFF;">}\`</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// Send a binary message to the peer</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> buffer </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ArrayBuffer</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">4</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> view </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Float32Array</span><span style="color:#A6ACCD;">(buffer)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">view[</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">] </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1.0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">peer</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">send</span><span style="color:#A6ACCD;">(buffer)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// Send a unreliable message to the peer</span></span>
<span class="line"><span style="color:#A6ACCD;">peer</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">send</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">Hey </span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">peer</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">id</span><span style="color:#89DDFF;">}\`</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h2 id="peer-transforms" tabindex="-1">Peer Transforms <a class="header-anchor" href="#peer-transforms" aria-label="Permalink to &quot;Peer Transforms&quot;">​</a></h2><p>You can use the readonly peer <code>translation</code> and <code>rotation</code> properties to get the root transform of the peer. These properties update every frame.</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">peer</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">translation</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// WebSG.Vector3</span></span>
<span class="line"><span style="color:#A6ACCD;">peer</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">rotation</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// WebSG.Quaternion</span></span></code></pre></div><h2 id="receiving-messages" tabindex="-1">Receiving Messages <a class="header-anchor" href="#receiving-messages" aria-label="Permalink to &quot;Receiving Messages&quot;">​</a></h2><p>To listen for network messages you can create a NetworkListener with <code>network.listen()</code>.</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// Create a new network listener</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> networkListener </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> network</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">listen</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// Iterate over all messages received since the last call to .receive()</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> (</span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> message </span><span style="color:#89DDFF;">of</span><span style="color:#A6ACCD;"> networkListener</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">receive</span><span style="color:#A6ACCD;">()) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">message</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">peer</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// The peer that sent the message</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">message</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">data</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// The message data, either a string or an ArrayBuffer</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">message</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">isBinary</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// True if the message is a binary ArrayBuffer</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// Dispose of the network listener and associated resources if you no longer need it</span></span>
<span class="line"><span style="color:#A6ACCD;">networkListener</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">close</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>To reduce memory allocations you can pass a buffer into <code>.receive()</code> to write message data into.</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> buffer </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ArrayBuffer</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">1024</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> networkListener </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> network</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">listen</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> (</span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> message </span><span style="color:#89DDFF;">of</span><span style="color:#A6ACCD;"> networkListener</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">receive</span><span style="color:#A6ACCD;">(buffer)) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">message</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">peer</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// The peer that sent the message</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">message</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">data</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// The message data, either a string or an ArrayBuffer</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">message</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">isBinary</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// True if the message is a binary ArrayBuffer</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">message</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">bytesWritten</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// The number of bytes written into the buffer</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div>`,21),p=[l];function t(r,c,i,y,D,A){return a(),n("div",null,p)}const d=s(o,[["render",t]]);export{F as __pageData,d as default};
