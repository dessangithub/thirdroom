import{_ as s,o as a,c as e,O as n}from"./chunks/framework.c0965656.js";const D=JSON.parse('{"title":"Web Scene Graph Overview","description":"","frontmatter":{},"headers":[],"relativePath":"guides/websg/index.md","filePath":"guides/websg/index.md"}'),o={name:"guides/websg/index.md"},l=n(`<h1 id="web-scene-graph-overview" tabindex="-1">Web Scene Graph Overview <a class="header-anchor" href="#web-scene-graph-overview" aria-label="Permalink to &quot;Web Scene Graph Overview&quot;">​</a></h1><p>The Web Scene Graph API (WebSG) makes it possible to program portable virtual worlds. It is a WebAssembly and JavaScript API for scene graph manipulation in a sandboxed environment. WebSG is designed to mirror the data structures defined by the glTF 2.0 specification and is intended to be used to add runtime behavior to these scenes. Just as the HTML DOM API added the ability for developers to interact with and manipulate HTML websites, the WebSG API allows you to interact with and manipulate 3D scenes.</p><p>Third Room is the first implementation of this API, but it is intended for use in any context where sandboxed scripting of 3D environments is desired.</p><h2 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">​</a></h2><p>The following is a JavaScript program using the WebSG API which finds a light in the provided scene and changes its color every frame:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">world</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">onload</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">directionalLight</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">world</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">findLightByName</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">DirectionalLight</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">world</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">onupdate</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">dt</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">time</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">directionalLight</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">color</span><span style="color:#F07178;">[</span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">Math</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">sin</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">time</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">/</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span></code></pre></div><p>The same program can be written in C and compiled as a standalone WASM module:</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">math.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">websg.h</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">Light </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">directionalLight</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">export </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">websg_load</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  directionalLight </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">websg_world_find_light_by_name</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">DirectionalLight</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">export </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">websg_update</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">float_t</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">dt</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">float_t</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">time</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">websg_light_set_color_element</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">directionalLight</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">sin</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">time</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1.0</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">/</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">2.0</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>More examples are available in the <a href="https://github.com/matrix-org/thirdroom/tree/main/examples/" target="_blank" rel="noreferrer">examples</a> directory.</p><h2 id="javascript-api-bindings" tabindex="-1">JavaScript API Bindings <a class="header-anchor" href="#javascript-api-bindings" aria-label="Permalink to &quot;JavaScript API Bindings&quot;">​</a></h2><p>The WebSG JavaScript API is a thin wrapper around the WebAssembly API and uses the QuickJS JavaScript engine to execute Javascript code in a WebAssembly context.</p><p><a href="./../../websg-js/">Read the JavaScript API Docs Here</a></p><h2 id="websg-c-headers" tabindex="-1">WebSG C Headers <a class="header-anchor" href="#websg-c-headers" aria-label="Permalink to &quot;WebSG C Headers&quot;">​</a></h2><p>The C header files for the WebSG API are available <a href="https://github.com/matrix-org/thirdroom/tree/main/src/engine/scripting/emscripten/src" target="_blank" rel="noreferrer">here</a>.</p><ul><li>websg.h: The main header file for the WebSG API</li><li>websg-networking.h: Networking functions</li><li>thirdroom.h: ThirdRoom specific extensions</li><li>matrix.h: Matrix specific extensions</li></ul><p>We&#39;ll be adding more documentation for C and other language bindings in the future. We&#39;re currently focused on fully documenting the JS bindings and stabilizing the API. If you&#39;re interested in helping flesh out documentation for other languages, please reach out on <a href="https://matrix.to/#/#thirdroom-dev:matrix.org" target="_blank" rel="noreferrer">Matrix</a>.</p><h2 id="usage-in-third-room" tabindex="-1">Usage in Third Room <a class="header-anchor" href="#usage-in-third-room" aria-label="Permalink to &quot;Usage in Third Room&quot;">​</a></h2><p>There are two ways to add a script to a world:</p><ol><li>Open the in-world editor with tilde (\`) and start editing the world&#39;s script</li><li>Upload the JavaScript or WebAssembly file on the world&#39;s settings page</li></ol><p>If you&#39;re just getting started, we recommend checking out the <a href="./basketball/part-1.html">getting started tutorial series</a> where you&#39;ll learn how to make a simple basketball game using the WebSG API.</p><h2 id="usage-in-other-applications" tabindex="-1">Usage in Other Applications <a class="header-anchor" href="#usage-in-other-applications" aria-label="Permalink to &quot;Usage in Other Applications&quot;">​</a></h2><p>We&#39;re focused on building out a browser-based client in JavaScript, but we&#39;ve seen a lot of interest in building out alternate clients in Godot, Unity, and Unreal. If you&#39;re interested in building a Third Room client or integrating the WebSG API into your own application, please reach out on <a href="https://matrix.to/#/#thirdroom-dev:matrix.org" target="_blank" rel="noreferrer">Matrix</a>. There you&#39;ll find other like-minded people interested in building out the WebSG ecosystem.</p>`,22),t=[l];function p(r,i,c,y,d,F){return a(),e("div",null,t)}const A=s(o,[["render",p]]);export{D as __pageData,A as default};
