import{_ as e,o,c as s,O as a}from"./chunks/framework.c0965656.js";const g=JSON.parse('{"title":"Self Hosting Third Room","description":"","frontmatter":{},"headers":[],"relativePath":"guides/self-hosting.md","filePath":"guides/self-hosting.md"}'),t={name:"guides/self-hosting.md"},n=a(`<h1 id="self-hosting-third-room" tabindex="-1">Self Hosting Third Room <a class="header-anchor" href="#self-hosting-third-room" aria-label="Permalink to &quot;Self Hosting Third Room&quot;">​</a></h1><p>Third Room can be self-hosted, giving you even more control over the user experience and content distribution. By self-hosting, you can customize the client to meet your specific needs and requirements while still benefiting from the core functionality of Third Room.</p><p>Third Room is a single page web app (SPA) and can be hosted on any static web server. You do not need to host your own Matrix homeserver in order to customize or self-host your own Third Room client.</p><p>If you also want to self-host a Matrix homeserver, please refer to the <a href="https://matrix-org.github.io/synapse/develop/welcome_and_overview.html" target="_blank" rel="noreferrer">Synapse documentation</a>.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Third Room uses Matrix&#39;s Group VoIP Calls feature to enable networking and voice chat in virtual worlds. In order for WebRTC calls to connect in all networking scenarios, you should set up a TURN server such as Coturn. You can find more information on configuring Coturn in Synapse <a href="https://matrix-org.github.io/synapse/develop/turn-howto.html" target="_blank" rel="noreferrer">here</a>.</p></div><h2 id="prerequisites" tabindex="-1">Prerequisites <a class="header-anchor" href="#prerequisites" aria-label="Permalink to &quot;Prerequisites&quot;">​</a></h2><p>To build the Third Room client you&#39;ll need <a href="https://nodejs.org" target="_blank" rel="noreferrer">Node</a> (version 16+) and <a href="https://classic.yarnpkg.com" target="_blank" rel="noreferrer">yarn</a> (v1) installed on your system.</p><p>You&#39;ll also need to clone the Third Room repository:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">clone</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">https://github.com/matrix-org/thirdroom.git</span></span></code></pre></div><h2 id="building-the-client" tabindex="-1">Building the Client <a class="header-anchor" href="#building-the-client" aria-label="Permalink to &quot;Building the Client&quot;">​</a></h2><p>First ensure that you are in the thirdroom root directory</p><div class="language-back"><button title="Copy Code" class="copy"></button><span class="lang">back</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">cd thirdroom</span></span></code></pre></div><p>Then install the dependencies:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">yarn</span></span></code></pre></div><p>Then build the client:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">yarn</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">build</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>In some environments we&#39;ve seen the build step allocate too much memory and fail. If you run into this issue, you can try increasing the memory limit for Node:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">NODE_OPTIONS</span><span style="color:#89DDFF;">=</span><span style="color:#C3E88D;">--max_old_space_size=</span><span style="color:#F78C6C;">4096</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">yarn</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">build</span></span></code></pre></div></div><p>The built client will be available in the <code>dist</code> directory.</p><h2 id="hosting-the-client" tabindex="-1">Hosting the Client <a class="header-anchor" href="#hosting-the-client" aria-label="Permalink to &quot;Hosting the Client&quot;">​</a></h2><p>You can use any static web server to host the client. We recommend using <a href="https://caddyserver.com" target="_blank" rel="noreferrer">Caddy</a> as it&#39;s easy to configure and supports HTTPS out of the box. <a href="https://nginx.org" target="_blank" rel="noreferrer">Nginx</a> is another popular option.</p><h3 id="caddy" tabindex="-1">Caddy <a class="header-anchor" href="#caddy" aria-label="Permalink to &quot;Caddy&quot;">​</a></h3><p>To host the client with Caddy, first install Caddy on your system. You can find instructions for your platform <a href="https://caddyserver.com/docs/install" target="_blank" rel="noreferrer">here</a>.</p><p>Then create a Caddyfile with the following content, make sure to change the root path to the path of the <code>dist</code> directory you built earlier:</p><div class="language-caddyfile"><button title="Copy Code" class="copy"></button><span class="lang">caddyfile</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">localhost:3000 {</span></span>
<span class="line"><span style="color:#A6ACCD;">  encode gzip</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">  handle {</span></span>
<span class="line"><span style="color:#A6ACCD;">    root * ./path/to/dist</span></span>
<span class="line"><span style="color:#A6ACCD;">    try_files {path} {path}/index.html /index.html</span></span>
<span class="line"><span style="color:#A6ACCD;">    file_server</span></span>
<span class="line"><span style="color:#A6ACCD;">    header Cross-Origin-Opener-Policy &quot;same-origin&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">    header Cross-Origin-Embedder-Policy &quot;require-corp&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">  }</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span></code></pre></div><p>Then run Caddy in the same directory as your Caddyfile:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">caddy</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">run</span></span></code></pre></div><p>You should now be able to access the client at <code>http://localhost:3000</code>.</p><p>You can change <code>localhost:3000</code> to whatever domain you&#39;re hosting the client on.</p><h2 id="required-headers" tabindex="-1">Required Headers <a class="header-anchor" href="#required-headers" aria-label="Permalink to &quot;Required Headers&quot;">​</a></h2><p>Third Room requires the following headers to be set in order to function correctly:</p><div class="language-http"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">Cross-Origin-Opener-Policy &quot;same-origin&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">Cross-Origin-Embedder-Policy &quot;require-corp&quot;</span></span></code></pre></div><p>If your homeserver is hosted on the same domain as your client you also must ensure that the <code>./well-known</code> directory is served properly so that the client can discover the homeserver configuration.</p><h2 id="additional-configuration" tabindex="-1">Additional Configuration <a class="header-anchor" href="#additional-configuration" aria-label="Permalink to &quot;Additional Configuration&quot;">​</a></h2><p>Configuration options can be found in the <code>/config.json</code> file. You can change the default homeserver displayed on the login page, the homeservers shown in the dropdown, the OpenID Connect provider configuration, and more there. This file should be modified before the client is built.</p><p>If you&#39;re hosting your own homeserver on the same domain as the client, you&#39;ll also want to adjust the files in the <code>./well-known</code> directory to point to your homeserver.</p><p>Other client modifications and configuration are up to you. We&#39;ve left them undocumented for now and encourage you to explore the codebase to see what&#39;s possible. However, if you&#39;re looking to extensively modify the client&#39;s runtime behavior, we suggest you look to see if it&#39;s possible with the existing WebSG APIs first. For content to be interoperable across clients, it&#39;s important that we all use the same APIs and protocols. If you&#39;re interested in getting involved in shaping the future of the glTF or WebSG standards please get in touch with us on <a href="https://matrix.to/#/#thirdroom-dev:matrix.org" target="_blank" rel="noreferrer">Matrix</a>.</p>`,36),i=[n];function r(l,p,c,d,h,u){return o(),s("div",null,i)}const m=e(t,[["render",r]]);export{g as __pageData,m as default};
