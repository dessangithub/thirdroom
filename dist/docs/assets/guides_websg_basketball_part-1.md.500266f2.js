import{_ as s,o as a,c as n,O as l}from"./chunks/framework.c0965656.js";const A=JSON.parse('{"title":"Getting Started with Web Scene Graph","description":"","frontmatter":{},"headers":[],"relativePath":"guides/websg/basketball/part-1.md","filePath":"guides/websg/basketball/part-1.md"}'),o={name:"guides/websg/basketball/part-1.md"},p=l(`<h1 id="getting-started-with-web-scene-graph" tabindex="-1">Getting Started with Web Scene Graph <a class="header-anchor" href="#getting-started-with-web-scene-graph" aria-label="Permalink to &quot;Getting Started with Web Scene Graph&quot;">​</a></h1><p>In this series we&#39;ll be creating a simple basketball game using the Web Scene Graph API.</p><p>It will be split into 3 parts:</p><ol><li>Spawning custom interactable objects and the Action Bar API</li><li>Keeping score with collision listeners and the UI API</li><li>Networking using the Network Messages and Network Replicator API</li></ol><h2 id="setup" tabindex="-1">Setup <a class="header-anchor" href="#setup" aria-label="Permalink to &quot;Setup&quot;">​</a></h2><p>If you&#39;re coming here from the in-world tutorial, you should already have a world set up with the correct settings. If not, create a new world in Third Room using <a href="https://thirdroom.io/gltf/BasketballCourt.glb" target="_blank" rel="noreferrer">this scene file</a> and <a href="https://thirdroom.io/image/BasketballPreview.png" target="_blank" rel="noreferrer">this preview image</a>. The Room name can be whatever you want and the other settings can be left as default.</p><p>Open the editor using the <code>\`</code> key.</p><p>On the left hand side of the editor you can see the hierarchy panel. You can use this to select objects in the scene and inspect their properties on the right hand side in the property panel.</p><p>In the top left we can switch from the scene editor mode to the script editor mode. Let&#39;s do that now.</p><p>In the script editor mode, the hierarchy panel is still visible and can be used to reference objects in the scene. You can drag and drop nodes from the panel into the script editor to reference them.</p><p>Let&#39;s do this now by dragging the <code>Basketball</code> node into the editor. Note that the code will be inserted at the cursor position.</p><p>At any point in the code you can use the <code>console.log()</code> function to print a message to the browser&#39;s console. You can open your browser&#39;s dev tools by pressing <code>CTRL + SHIFT + I</code> or <code>CMD + SHIFT + I</code> on a Mac. Then select the console tab to see the output. If you get stuck, you can use this to debug your code and see error messages.</p><h2 id="the-web-scene-graph-api" tabindex="-1">The Web Scene Graph API <a class="header-anchor" href="#the-web-scene-graph-api" aria-label="Permalink to &quot;The Web Scene Graph API&quot;">​</a></h2><p>The Web Scene Graph API (WebSG) is a WebAssembly API for high level 3D scene graph manipulation. It is designed to be used for writing sandboxed user generated content in a multiplayer environment. This tutorial series will be focused on the JavaScript bindings, but it is possible to use any language that compiles to WebAssembly to write WebSG code.</p><p>The WebSG API is designed around the glTF file format. glTF is a 3D file format designed for efficient transmission of 3D scenes. It is widely adopted in many 3D applications and engines and the ecosystem is growing rapidly. You can find out more about glTF <a href="https://www.khronos.org/gltf/" target="_blank" rel="noreferrer">here</a>.</p><p>While Third Room currently has only implementation of The WebSG API. It is designed such that it can be ported to other engines and platforms. Enabling truly interoperable 3D experiences. We hope to standardize the API with the help of the community over time.</p><h2 id="the-world" tabindex="-1">The World <a class="header-anchor" href="#the-world" aria-label="Permalink to &quot;The World&quot;">​</a></h2><p>In WebSG, all resources are created and accessed through the global <a href="../../../websg-js/namespaces/namespace.WebSG/classes/class.World">world</a> object.</p><p>The world also has callbacks that can be set to be called for certain lifecycle events.</p><p><code>world.onload</code> is called when the world&#39;s glTF document is loaded and ready to be interacted with. <code>world.onenter</code> is called when the user enters the world. <code>world.onupdate</code> is called whenever the game loop updates. This is where you should put your game logic.</p><p>The script editor comes with a basic template that already has the <code>world.onload</code> and <code>world.onupdate</code> set for you.</p><p>In the <code>world.onload</code> callback, let&#39;s use the <code>world.findNodeByName()</code> function to find the <code>Basketball</code> node and log its translation.</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// Wait for the world to load</span></span>
<span class="line"><span style="color:#A6ACCD;">world</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">onload</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// Now that the world is loaded, we can find the basketball node</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">basketballNode</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">world</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">findNodeByName</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Basketball</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// We can temporarily log the translation to the console</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">Basketball translation: </span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">basketballNode</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">translation</span><span style="color:#89DDFF;">}\`</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span></code></pre></div><p>Save and run the script and open the browser console. You should see the basketball&#39;s translation logged once.</p><h2 id="the-action-bar" tabindex="-1">The Action Bar <a class="header-anchor" href="#the-action-bar" aria-label="Permalink to &quot;The Action Bar&quot;">​</a></h2><p>Great, now that we know how to find nodes in the world. Let&#39;s learn how to spawn new ones.</p><p>We&#39;re going to use the Action Bar API to spawn new basketballs when the user presses a button.</p><p>Just like we can find nodes in the world, we can also find image resources in the world using <code>world.findImageByName()</code>. Let&#39;s do that now to find the <code>Basketball</code> image.</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">world</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">onload</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">basketballNode</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">world</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">findNodeByName</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Basketball</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// Just like the node, find the image by its name</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">basketballThumbnail</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">world</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">findImageByName</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Basketball</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// Then set the action bar items</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">thirdroom</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">actionBar</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setItems</span><span style="color:#F07178;">([</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      id</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">basketball</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// This is the action id</span></span>
<span class="line"><span style="color:#F07178;">      label</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Basketball</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// This is the label shown to the user in tooltips</span></span>
<span class="line"><span style="color:#F07178;">      thumbnail</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">basketballThumbnail</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// This is the thumbnail image used in the action bar</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#F07178;">  ])</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span></code></pre></div><p>Save and run the script. You should see the action bar change to show a basketball icon.</p><p>We can now listen for the <code>basketball</code> action to be activated by creating an <a href="../../../websg-js/namespaces/namespace.ThirdRoom/classes/class.ActionBar">ActionBarListener</a>.</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">world</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">onload</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">basketballNode</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">world</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">findNodeByName</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Basketball</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">basketballThumbnail</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">world</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">findImageByName</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Basketball</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">thirdroom</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">actionBar</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setItems</span><span style="color:#F07178;">([</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      id</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">basketball</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">      label</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Basketball</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">      thumbnail</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">basketballThumbnail</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#F07178;">  ])</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// Create an action bar listener</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">actionBarListener</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">thirdroom</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">actionBar</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">createListener</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// Add an onupdate callback to check for actions each frame</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">world</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">onupdate</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// Iterate over all actions since the last call to .actions()</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#F07178;"> (</span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">actionId</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">of</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">actionBarListener</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">actions</span><span style="color:#F07178;">()) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">Action </span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">actionId</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;"> activated</span><span style="color:#89DDFF;">\`</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span></code></pre></div><p>Save and run the script. Now, whenever you press the <code>1</code> key, you should the action id logged to the console.</p><p>Now let&#39;s spawn our basketball.</p><p>Lets write a new function for this called <code>spawnBasketball()</code>.</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">world</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">onload</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">basketballNode</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">world</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">findNodeByName</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Basketball</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">basketballThumbnail</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">world</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">findImageByName</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Basketball</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">thirdroom</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">actionBar</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setItems</span><span style="color:#F07178;">([</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      id</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">basketball</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">      label</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Basketball</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">      thumbnail</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">basketballThumbnail</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#F07178;">  ])</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">actionBarListener</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">thirdroom</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">actionBar</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">createListener</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">function</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">spawnBasketball</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// Create a new node using an instance of the basketball&#39;s mesh</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">ball</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">world</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">createNode</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      mesh</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">basketballNode</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">mesh</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// Grab the local user&#39;s origin and direction</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// When using mouse and keyboard this will be the camera (center of your screen).</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// When using WebXR controllers this will be your primary controller.</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">origin</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">world</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">primaryInputSourceOrigin</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">direction</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">world</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">primaryInputSourceDirection</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// We&#39;ll set the ball&#39;s forward direction to be the same as the user&#39;s</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">ball</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setForwardDirection</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">direction</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// Then we&#39;ll set the translation to be 0.5 meters in front of the user</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">ball</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">translation</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">set</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">origin</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addScaledVector</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">direction</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0.5</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// And then we&#39;ll add it to the environment</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// This is important otherwise the ball will not be rendered</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">world</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">environment</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addNode</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">ball</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">world</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">onupdate</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#F07178;"> (</span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">actionId</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">of</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">actionBarListener</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">actions</span><span style="color:#F07178;">()) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">// Check if the action is the basketball action</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">actionId</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">basketball</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// Then call our new spawnBasketball function</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">spawnBasketball</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span></code></pre></div><p>Save and run the script. Now when you press the <code>1</code> key, you should see a basketball spawn in front of your camera.</p><p>But it doesn&#39;t do anything yet. It just sits midair. Let&#39;s add some physics to it.</p><h2 id="colliders-and-physics-bodies" tabindex="-1">Colliders and Physics Bodies <a class="header-anchor" href="#colliders-and-physics-bodies" aria-label="Permalink to &quot;Colliders and Physics Bodies&quot;">​</a></h2><p>In order for the basketball to interact with the environment, we need to add a collider and physics body to it. The collider will be used to detect collisions with other objects and the physics body will be used to simulate the ball&#39;s movement.</p><p>The scene we are using already has a sphere collider for the basketball. Let&#39;s copy it over to our new ball. We&#39;ll also need to add a physics body to the ball using <code>node.addPhysicsBody()</code></p><p>Here&#39;s our new <code>spawnBasketball</code> function:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">spawnBasketball</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">ball</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">world</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">createNode</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    mesh</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">basketballNode</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">mesh</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// Collider is a WebSG resource, so we can copy the reference over</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// from the basketball node</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">ball</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">collider</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">basketballNode</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">collider</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// Physics Body is a WebSG behavior and needs to be added to the node.</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// Behaviors have unique instances per node.</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">ball</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addPhysicsBody</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    type</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">WebSG</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">PhysicsBodyType</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Rigid</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// Rigid bodies are affected by gravity and other forces</span></span>
<span class="line"><span style="color:#F07178;">    mass</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// Mass of the ball in kilograms</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">origin</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">world</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">primaryInputSourceOrigin</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">direction</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">world</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">primaryInputSourceDirection</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">ball</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setForwardDirection</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">direction</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">ball</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">translation</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">set</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">origin</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addScaledVector</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">direction</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0.5</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// Create a new 3 dimensional vector to represent the impulse to apply</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// to the ball. We use the direction vector to create a new vector</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// and scale it by 8 to make it shoot in the direction we&#39;re looking faster.</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">impulse</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">WebSG</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Vector3</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">direction</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">multiplyScalar</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">8</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// Then we apply the impluse to the ball&#39;s physics body</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">ball</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">physicsBody</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">applyImpulse</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">impulse</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">world</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">environment</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addNode</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">ball</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>Save and run the script. Now when you press the <code>1</code> key, you should see a basketball spawn in front of your camera and shoot off in the direction you&#39;re looking.</p><p>This is great! We can shoot off basketballs but we can&#39;t pick them up yet. Let&#39;s fix that.</p><h2 id="grabbables-and-interactables" tabindex="-1">Grabbables and Interactables <a class="header-anchor" href="#grabbables-and-interactables" aria-label="Permalink to &quot;Grabbables and Interactables&quot;">​</a></h2><p>In order to pick up the basketball, we need to make it grabbable. You can make any node with a physics body grabbable by adding an interactable behavior to it with type <code>Grabbable</code>.</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">spawnBasketball</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">ball</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">world</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">createNode</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    mesh</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">basketballNode</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">mesh</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">ball</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">collider</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">basketballNode</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">collider</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">ball</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addPhysicsBody</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    type</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">WebSG</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">PhysicsBodyType</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Rigid</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    mass</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// Add the interactable behavior after adding the physics body</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">ball</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addInteractable</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    type</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">WebSG</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">InteractableType</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Grabbable</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// Make the ball grabbable</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">origin</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">world</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">primaryInputSourceOrigin</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">direction</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">world</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">primaryInputSourceDirection</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">ball</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setForwardDirection</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">direction</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">ball</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">translation</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">set</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">origin</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addScaledVector</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">direction</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0.5</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">impulse</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">WebSG</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Vector3</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">direction</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">multiplyScalar</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">8</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">ball</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">physicsBody</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">applyImpulse</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">impulse</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">world</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">environment</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addNode</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">ball</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>That&#39;s it. Save and run the script. Now when you press the <code>1</code> key, you should see a basketball spawn in front of your camera and shoot off in the direction you&#39;re looking. You should also be able to grab it by pressing the left mouse button or <code>E</code> key.</p><h1 id="summary-and-next-steps" tabindex="-1">Summary and Next Steps <a class="header-anchor" href="#summary-and-next-steps" aria-label="Permalink to &quot;Summary and Next Steps&quot;">​</a></h1><p>That&#39;s it! You&#39;ve created a simple scene with a basketball that you can spawn and shoot around.</p><p>In the next part of the tutorial we&#39;ll track the score of the basketballs you shoot into the hoop add a scoreboard to the scene.</p>`,52),e=[p];function t(c,r,y,F,i,D){return a(),n("div",null,e)}const h=s(o,[["render",t]]);export{A as __pageData,h as default};
