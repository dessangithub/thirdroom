import{_ as e,o,c as s,O as t}from"./chunks/framework.c0965656.js";const p=JSON.parse('{"title":"Class: CollisionListener","description":"","frontmatter":{},"headers":[],"relativePath":"websg-js/classes/WebSG.CollisionListener.md","filePath":"websg-js/classes/WebSG.CollisionListener.md"}'),i={name:"websg-js/classes/WebSG.CollisionListener.md"},a=t('<h1 id="class-collisionlistener" tabindex="-1">Class: CollisionListener <a class="header-anchor" href="#class-collisionlistener" aria-label="Permalink to &quot;Class: CollisionListener&quot;">​</a></h1><p><a href="./../modules/WebSG.html">WebSG</a>.CollisionListener</p><p>A Collision Listener provides an interface for listening to collisions events between nodes with colliders. Collision events are recorded for both the start and end of a collision. <a href="./WebSG.CollisionListener.html#collisions">.collisions()</a> should be called each frame to iterate through the collisions that occurred since the last call to .collisions(). Failing to regularly call .collisions() will result in a memory leak. If you are done listening to collisions, you should call .dispose() to free up the memory used by the collision listener and stop listening to collisions.</p><h2 id="table-of-contents" tabindex="-1">Table of contents <a class="header-anchor" href="#table-of-contents" aria-label="Permalink to &quot;Table of contents&quot;">​</a></h2><h3 id="constructors" tabindex="-1">Constructors <a class="header-anchor" href="#constructors" aria-label="Permalink to &quot;Constructors&quot;">​</a></h3><ul><li><a href="./WebSG.CollisionListener.html#constructor">constructor</a></li></ul><h3 id="methods" tabindex="-1">Methods <a class="header-anchor" href="#methods" aria-label="Permalink to &quot;Methods&quot;">​</a></h3><ul><li><a href="./WebSG.CollisionListener.html#collisions">collisions</a></li><li><a href="./WebSG.CollisionListener.html#dispose">dispose</a></li></ul><h2 id="constructors-1" tabindex="-1">Constructors <a class="header-anchor" href="#constructors-1" aria-label="Permalink to &quot;Constructors&quot;">​</a></h2><h3 id="constructor" tabindex="-1">constructor <a class="header-anchor" href="#constructor" aria-label="Permalink to &quot;constructor&quot;">​</a></h3><p>• <strong>new CollisionListener</strong>()</p><h2 id="methods-1" tabindex="-1">Methods <a class="header-anchor" href="#methods-1" aria-label="Permalink to &quot;Methods&quot;">​</a></h2><h3 id="collisions" tabindex="-1">collisions <a class="header-anchor" href="#collisions" aria-label="Permalink to &quot;collisions&quot;">​</a></h3><p>▸ <strong>collisions</strong>(): <a href="./WebSG.CollisionIterator.html"><code>CollisionIterator</code></a></p><p>Returns an iterator for the collisions that occurred since the last call to .collisions().</p><h4 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><a href="./WebSG.CollisionIterator.html"><code>CollisionIterator</code></a></p><h4 id="defined-in" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in" aria-label="Permalink to &quot;Defined in&quot;">​</a></h4><p><a href="https://github.com/dessangithub/thirdroom/blob/ef458977/packages/websg-types/types/websg.d.ts#L969" target="_blank" rel="noreferrer">websg.d.ts:969</a></p><hr><h3 id="dispose" tabindex="-1">dispose <a class="header-anchor" href="#dispose" aria-label="Permalink to &quot;dispose&quot;">​</a></h3><p>▸ <strong>dispose</strong>(): <code>void</code></p><p>Disposes of the collision listener and stops listening to collisions.</p><h4 id="returns-1" tabindex="-1">Returns <a class="header-anchor" href="#returns-1" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>void</code></p><h4 id="defined-in-1" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-1" aria-label="Permalink to &quot;Defined in&quot;">​</a></h4><p><a href="https://github.com/dessangithub/thirdroom/blob/ef458977/packages/websg-types/types/websg.d.ts#L973" target="_blank" rel="noreferrer">websg.d.ts:973</a></p>',27),l=[a];function r(n,c,h,d,u,b){return o(),s("div",null,l)}const m=e(i,[["render",r]]);export{p as __pageData,m as default};
